
#--------------------------2024 Antenatal Vaccination use---------------------------------------------------------------------------------------------
# ........................................................................................................................

# clear environment
rm(list=ls()) 

# clear console
cat("\014")


# ------------------------List of packages ------------------------

packages <- c("readr", "readxl", "purrr", "stringr", "Hmisc", "gmodels", "stringdist","psych", "lubridate", "tidyr", "tibble", "ggplot2", "dplyr", "tidyverse")

# Install and load packages
for (pkg in packages) {
  if (!require(pkg, character.only = TRUE)) {
    install.packages(pkg)
    library(pkg, character.only = TRUE)
  }
}

gc() #garbage collector to clean up the workspace.

# set the working directory 

thisHuman<-Sys.getenv("username")

if (thisHuman=="he227319"){
  thispath<-"C:/Users/he227319/WA Health/Boorloo PHU Public Health Intelligence - PHIntelligence/codeRepository/Data analysis_vaccination_ syphilis/Antenatal Vaccination/Data/" # Hab
}


setwd ("C:/Users/he227319/WA Health/Boorloo PHU Public Health Intelligence - PHIntelligence/codeRepository/Data analysis_vaccination_ syphilis/Antenatal Vaccination/Data/")


# -----------------------preparing data for age group 10-20 years-------------------------------------------------------------------------------------
# ......................The data for this analysis was extracted on 2025 03 18 from AIR ........................................................................


# Extract the contents of the zip files

unzip("AIR011A-W86651-20250318_0_10yr.zip", exdir = "AIR011A-W86651-20250318_0_10yr")
unzip("AIR011A-W86651-20250318_10_20yr.zip", exdir = "AIR011A-W86651-20250318_10_20yr")
unzip("AIR011A-W86651-20250318_20_30yr.zip", exdir = "AIR011A-W86651-20250318_20_30yr")
unzip("AIR011A-W86651-20250318_30_40yr.zip", exdir = "AIR011A-W86651-20250318_30_40yr")
unzip("AIR011A-W86651-20250318_40_50yr.zip", exdir = "AIR011A-W86651-20250318_40_50yr")


# .....................................Import IH (Individual data)....................................................
# set the path of the file 
setwd ("C:/Users/he227319/WA Health/Boorloo PHU Public Health Intelligence - PHIntelligence/codeRepository/Data analysis_vaccination_ syphilis/Antenatal Vaccination/Data/AIR011A-W86651-20250318_10_20yr/")

# import data 

ih_antvac_10_20yr <- read.csv("IH250318.csv")

# change the variables to the lower cases
colnames(ih_antvac_10_20yr) <- tolower(colnames(ih_antvac_10_20yr))
str(ih_antvac_10_20yr)

# Calculating age and grouping <=14 vs >15 years
# generate a new data var so that we can keep the original date for appending later
ih_antvac_10_20yr <- ih_antvac_10_20yr %>% 
  mutate(tempdob=dob)

ih_antvac_10_20yr$tempdob <-as.Date(ih_antvac_10_20yr$tempdob, "%d/%m/%Y") # format the date 

# Add age group directly within mutate
ih_antvac_10_20yr <- ih_antvac_10_20yr %>%
  mutate(age = as.integer((as.Date("2024-12-31") - as.Date(tempdob)) / dyears(1)), # used the end of 2024 for this calculation
         age_group = ifelse(age <= 14, "Below 15 years", "15 years and above"))


# Print the first few rows to check the results
head(ih_antvac_10_20yr)


# keep only females and 15 years and above  i.e. drop males, missing, &  below 15
table (ih_antvac_10_20yr$gender)
table (ih_antvac_10_20yr$age_group)


ih_antvac_10_20yr <- ih_antvac_10_20yr %>% filter(gender == "F" & age_group == "15 years and above")

table (ih_antvac_10_20yr$gender)

# Drop age, age_group

ih_antvac_10_20yr <- ih_antvac_10_20yr %>% select(-age, -age_group, -tempdob)
 str(ih_antvac_10_20yr)
 
 
# .....................................Import VC (vaccination data)-....................................................

 vc_antvac_10_20yr <- read.csv("VC250318.csv")

 # change the variables to the lower cases
 colnames(vc_antvac_10_20yr) <- tolower(colnames(vc_antvac_10_20yr))
 str(vc_antvac_10_20yr)
 
 # Calculating age and grouping <=14 vs >15 years
 # generate a new data var so that we can keep the original date for appending later
 vc_antvac_10_20yr <- vc_antvac_10_20yr %>% 
   mutate(tempdob=dob)
 
 vc_antvac_10_20yr$tempdob <-as.Date(vc_antvac_10_20yr$tempdob, "%d/%m/%Y") # format the date 
 
 # Add age group directly within mutate
 vc_antvac_10_20yr <- vc_antvac_10_20yr %>%
   mutate(age = as.integer((as.Date("2024-12-31") - as.Date(tempdob)) / dyears(1)), # used the end of 2024 for this calculation
          age_group = ifelse(age <= 14, "Below 15 years", "15 years and above"))
 
 
 # Print the first few rows to check the results
 head(vc_antvac_10_20yr)
 
 
 # keep only females and 15 years and above  i.e. drop males, missing, &  below 15
 table (vc_antvac_10_20yr$gender)
 table (vc_antvac_10_20yr$age_group)
 
 
 vc_antvac_10_20yr <- vc_antvac_10_20yr %>% filter(gender == "F" & age_group == "15 years and above")
 
 table (vc_antvac_10_20yr$gender)
 
 # Drop age, age_group
 
 vc_antvac_10_20yr <- vc_antvac_10_20yr %>% select(-age, -age_group, -tempdob)
 str(vc_antvac_10_20yr)
 


 # .....................................Import PD (Provider Details data)....................................................
 

pd_antvac_10_20yr <- read.csv("PD250318.csv")

# change the variables to the lower cases
colnames(pd_antvac_10_20yr) <- tolower(colnames(pd_antvac_10_20yr))
str(pd_antvac_10_20yr)



# -----------------------preparing data for age group 20-30 years-------------------------------------------------------------------------------------
# ........................................................................................................................

# set the path of the file 
setwd ("C:/Users/he227319/WA Health/Boorloo PHU Public Health Intelligence - PHIntelligence/codeRepository/Data analysis_vaccination_ syphilis/Antenatal Vaccination/Data/AIR011A-W86651-20250318_20_30yr/")


# .....................................Import IH (Individual data)....................................................

ih_antvac_20_30yr <- read.csv("IH250318.csv")

# change the variables to the lower cases
colnames(ih_antvac_20_30yr) <- tolower(colnames(ih_antvac_20_30yr))
str(ih_antvac_20_30yr)

# keep only females i.e. drop males and missing values
table (ih_antvac_20_30yr$gender)

ih_antvac_20_30yr <- ih_antvac_20_30yr %>% filter(gender == "F")

table (ih_antvac_20_30yr$gender)


# .....................................Import VC (vaccination data)...................................................

vc_antvac_20_30yr <- read.csv("VC250318.csv")

# change the variables to the lower cases
colnames(vc_antvac_20_30yr) <- tolower(colnames(vc_antvac_20_30yr))
str(vc_antvac_20_30yr)

# keep only females i.e. drop males and missing values
table (vc_antvac_20_30yr$gender)

vc_antvac_20_30yr <- vc_antvac_20_30yr %>% filter(gender == "F")

table (vc_antvac_20_30yr$gender)


# .....................................Import PD (Provider Details data)..................................................

pd_antvac_20_30yr <- read.csv("PD250318.csv")

# change the variables to the lower cases
colnames(pd_antvac_20_30yr) <- tolower(colnames(pd_antvac_20_30yr))
str(pd_antvac_20_30yr)


# -----------------------preparing data for age group 30-40 years-------------------------------------------------------------------------------------
# ........................................................................................................................

# set the path of the file 
setwd ("C:/Users/he227319/WA Health/Boorloo PHU Public Health Intelligence - PHIntelligence/codeRepository/Data analysis_vaccination_ syphilis/Antenatal Vaccination/Data/AIR011A-W86651-20250318_30_40yr/")

# .....................................Import IH (Individual data)..................................................

ih_antvac_30_40yr <- read.csv("IH250318.csv")

# change the variables to the lower cases
colnames(ih_antvac_30_40yr) <- tolower(colnames(ih_antvac_30_40yr))
str(ih_antvac_30_40yr)

# keep only females i.e. drop males and missing values
table (ih_antvac_30_40yr$gender)

ih_antvac_30_40yr <- ih_antvac_30_40yr %>% filter(gender == "F")

table (ih_antvac_30_40yr$gender)


# .....................................Import VC (vaccination data)..................................................

vc_antvac_30_40yr <- read.csv("VC250318.csv")

# change the variables to the lower cases
colnames(vc_antvac_30_40yr) <- tolower(colnames(vc_antvac_30_40yr))
str(vc_antvac_30_40yr)

# keep only females i.e. drop males and missing values

table (vc_antvac_30_40yr$gender)

vc_antvac_30_40yr <- vc_antvac_30_40yr %>% filter(gender == "F")

table (vc_antvac_30_40yr$gender)


# .....................................Import PD (Provider Details data)..................................................


pd_antvac_30_40yr <- read.csv("PD250318.csv")

# change the variables to the lower cases
colnames(pd_antvac_30_40yr) <- tolower(colnames(pd_antvac_30_40yr))
str(pd_antvac_30_40yr)




# -----------------------preparing data for age group 40-50 years-------------------------------------------------------------------------------------
# ........................................................................................................................

# set the path of the file 
setwd ("C:/Users/he227319/WA Health/Boorloo PHU Public Health Intelligence - PHIntelligence/codeRepository/Data analysis_vaccination_ syphilis/Antenatal Vaccination/Data/AIR011A-W86651-20250318_40_50yr/")

# .....................................Import IH (Individual data)..................................................

ih_antvac_40_50yr <- read.csv("IH250318.csv")

# change the variables to the lower cases
colnames(ih_antvac_40_50yr) <- tolower(colnames(ih_antvac_40_50yr))
str(ih_antvac_40_50yr)

# Calculating age and grouping <=44 vs 45 years
# generate a new data var so that we can keep the original date for appending later
ih_antvac_40_50yr <- ih_antvac_40_50yr %>% 
  mutate(tempdob=dob)

ih_antvac_40_50yr$tempdob <-as.Date(ih_antvac_40_50yr$tempdob, "%d/%m/%Y")


# Add age group directly within mutate
ih_antvac_40_50yr <- ih_antvac_40_50yr %>%
  mutate(age = as.integer((as.Date("2024-12-31") - as.Date(tempdob)) / dyears(1)),
         age_group = ifelse(age <= 44, "44 years or Below", "45 years"))

table (is.na(ih_antvac_40_50yr$age))
table (ih_antvac_40_50yr$age_group)


# Print the first few rows to check the results
head(ih_antvac_40_50yr)

# keep only females and 44 years and below i.e. drop males, missing, &  >=45 years
table (ih_antvac_40_50yr$gender)

ih_antvac_40_50yr <- ih_antvac_40_50yr %>% filter(gender == "F" & age_group == "44 years or Below")

table (ih_antvac_40_50yr$gender)


# Drop age, age_group

ih_antvac_40_50yr <- ih_antvac_40_50yr %>% select(-age, -age_group, -tempdob)

# .....................................Import VC (vaccination data)..................................................

vc_antvac_40_50yr <- read.csv("VC250318.csv")

# change the variables to the lower cases
colnames(vc_antvac_40_50yr) <- tolower(colnames(vc_antvac_40_50yr))
str(vc_antvac_40_50yr)

# Calculating age and grouping <=44 vs >=45 years
# generate a new data var so that we can keep the original date for appending later
vc_antvac_40_50yr <- vc_antvac_40_50yr %>% 
  mutate(tempdob=dob)

vc_antvac_40_50yr$tempdob <-as.Date(vc_antvac_40_50yr$tempdob, "%d/%m/%Y")


# Add age group directly within mutate
vc_antvac_40_50yr <- vc_antvac_40_50yr %>%
  mutate(age = as.integer((as.Date("2024-12-31") - as.Date(tempdob)) / dyears(1)),
         age_group = ifelse(age <= 44, "44 years or Below", "45 years"))

table (is.na(vc_antvac_40_50yr$age))
table (vc_antvac_40_50yr$age_group)


# Print the first few rows to check the results
head(vc_antvac_40_50yr)

# keep only females and 44 years and below i.e. drop males, missing, &  >=45years
table (vc_antvac_40_50yr$gender)

vc_antvac_40_50yr <- vc_antvac_40_50yr %>% filter(gender == "F" & age_group == "44 years or Below")

table (vc_antvac_40_50yr$gender)


# Drop age, age_group

vc_antvac_40_50yr <- vc_antvac_40_50yr %>% select(-age, -age_group, -tempdob)

# .....................................Import PD (Provider Details data).................................................

pd_antvac_40_50yr <- read.csv("PD250318.csv")

# change the variables to the lower cases
colnames(pd_antvac_40_50yr) <- tolower(colnames(pd_antvac_40_50yr))
str(pd_antvac_40_50yr)


# ----------------------------Appending Data --------------------------------------------------------
# ........................................................................................................................


# Append dataframes by IH, VC and PD

# Check if all dataframes have the same columns
# NB: if the column names are not the same, it will show an error message. Also quickly check the number of variables in each df (must be same)

# Check columns before appending so that we make sure the variables are the same across df


check_columns <- function(...) {
  dfs <- list(...)
  col_names <- lapply(dfs, colnames)
  ref_col_names <- col_names[[1]]
  
  for (i in 2:length(col_names)) {
    if (!all.equal(ref_col_names, col_names[[i]])) {
      stop(paste("Error: Dataframes have different columns. Variations found in dataframe", i, 
                 "\nReference columns:", paste(ref_col_names, collapse = ", "), 
                 "\nCurrent columns:", paste(col_names[[i]], collapse = ", ")))
    }
  }
  print("All dataframes have identical columns.")
}

# Check columns before appending
check_columns(ih_antvac_10_20yr, ih_antvac_20_30yr, ih_antvac_30_40yr, ih_antvac_40_50yr)
check_columns(vc_antvac_10_20yr, vc_antvac_20_30yr, vc_antvac_30_40yr, vc_antvac_40_50yr)
check_columns(pd_antvac_10_20yr, pd_antvac_20_30yr, pd_antvac_30_40yr, pd_antvac_40_50yr)


# Append dataframes by IH, VC and PD
ih_antvac_append <- rbind(ih_antvac_10_20yr, ih_antvac_20_30yr, ih_antvac_30_40yr, ih_antvac_40_50yr)
vc_antvac_append <- rbind(vc_antvac_10_20yr, vc_antvac_20_30yr, vc_antvac_30_40yr, vc_antvac_40_50yr)
pd_antvac_append <- rbind(pd_antvac_10_20yr, pd_antvac_20_30yr, pd_antvac_30_40yr, pd_antvac_40_50yr)

# Generating unique ID for individuals 
ih_antvac_append$dob<-as.Date(ih_antvac_append$dob, "%d/%m/%Y")

#Create a unique ID with first four characters of name and dob
ih_antvac_append$id<-paste(substr(ih_antvac_append$given.name,1,4), substr(ih_antvac_append$surname ,1,4), as.Date(ih_antvac_append$dob,"%d/%m/%Y"), sep="|")

# Generating unique ID for individuals 
vc_antvac_append$dob<-as.Date(vc_antvac_append$dob, "%d/%m/%Y")

#Create a unique ID with first four characters of name and dob
vc_antvac_append$id<-paste(substr(vc_antvac_append$given.name,1,4), substr(vc_antvac_append$surname ,1,4), as.Date(vc_antvac_append$dob,"%d/%m/%Y"), sep="|")




# Preparing data for 0-10 years
# ........................................................................................................................
# -----------------------preparing data for age group 0-10 years-------------------------------------------------------------------------------------
# ........................................................................................................................

# set the path of the file 
setwd ("C:/Users/he227319/WA Health/Boorloo PHU Public Health Intelligence - PHIntelligence/codeRepository/Data analysis_vaccination_ syphilis/Antenatal Vaccination/Data/AIR011A-W86651-20250318_0_10yr/")


# ............................ Import IH (Individual data) ........................................................

ih_child_0_10yr <- read.csv("IH250318.csv")
str(ih_child_0_10yr)

colnames(ih_child_0_10yr) <- tolower(colnames(ih_child_0_10yr))
str(ih_child_0_10yr)
colnames (ih_child_0_10yr)


# Generating unique ID for individuals 
ih_child_0_10yr$dob<-as.Date(ih_child_0_10yr$dob, "%d/%m/%Y")

#Create a unique ID with first four characters of name and dob
ih_child_0_10yr$id<-paste(substr(ih_child_0_10yr$given.name,1,4), substr(ih_child_0_10yr$surname ,1,4), as.Date(ih_child_0_10yr$dob,"%d/%m/%Y"), sep="|")

# Explore data by age in years to know the date of birth in each year
ih_child_0_10yr$dob[ih_child_0_10yr$dob == ""] <- NA # formatting the variable to know missing values
print(sum(is.na(ih_child_0_10yr$dob))) #  no missing value


# Extract child birth year to number of births by year
# extract year only from service date

ih_child_0_10yr$birth_year <- format(as.Date(ih_child_0_10yr$dob ), "%Y")
table(ih_child_0_10yr$birth_year)

table(ih_child_0_10yr$birth_year)

#  save the data

setwd ("C:/Users/he227319/WA Health/Boorloo PHU Public Health Intelligence - PHIntelligence/codeRepository/Data analysis_vaccination_ syphilis/Antenatal Vaccination/Data/")

save.image("Appended by data source_AntVac.RData")



# ........................................................................................................................
# --------------------------------------Appending and Merging data-------------------------------------------------------------------------------------------
# ........................................................................................................................


save.image("Merged data_AntVac.RData")


# Remove some df
rm (ih_antvac_10_20yr, ih_antvac_20_30yr, ih_antvac_30_40yr, ih_antvac_40_50yr)
rm (vc_antvac_10_20yr, vc_antvac_20_30yr, vc_antvac_30_40yr, vc_antvac_40_50yr)
rm (pd_antvac_10_20yr, pd_antvac_20_30yr, pd_antvac_30_40yr, pd_antvac_40_50yr)

gc() # garbage collection to clean the workspace 

# Copy of the original ih_antvac_append, vc_antvac_append and ih_child_0_10yr
ih_antvac_append_orignal <- ih_antvac_append
vc_antvac_append_orignal <- vc_antvac_append
ih_child_0_10yr_original <- ih_child_0_10yr # for recording purpose regarding the original data before filtering




# ------------------------------Selection diagram and Drop duplicate observations ----------------------------------------------------------
# the duplicate will also used to remove year overlaps in the data i.e. 10-20, 20-30, 30-40, 40-50 so double counting for same year


#....................Identifying women getting service 2019-2024 ie the study focus .........................
# to achieve this, we need to merge the data with VC df and keep those getting service 2019-2024

service_date <- vc_antvac_append_orignal %>%
  select(id, service.date, antenatal)

service_date$year<-as.Date(service_date$service.date, "%d/%m/%Y")
str(service_date$year)

# Convert to year
service_date$year <- format(service_date$year, "%Y")

table(service_date$year)

# keep the year we are interested in
# please note this women have any vaccination history (as evidenced via service date) between 2019 & 2024

service_date <- service_date %>%
  filter(year == 2019 | year == 2020 | year == 2021 | year == 2022 | year == 2023 | year == 2024)

table(service_date$year)

# now keep the IH data for this years ie keeping those matched with this id.
ih_antvac_append <- semi_join(ih_antvac_append_orignal, service_date, by = "id")


count (ih_antvac_append)


#..............................Drop duplicate observations in ih_antvac_append ..............................

# Remove missing medicate number given some women have missing observation for Medicare number, which is used for linking maternal and child data 
missing_medicare_ih_antvac_append <- ih_antvac_append

missing_medicare_ih_antvac_append$mc.number[missing_medicare_ih_antvac_append$mc.number == ""] <- NA # formatting the variable to know missing values
print(sum(is.na(missing_medicare_ih_antvac_append$mc.number))) #  no missing value

missing_medicare_ih_antvac_append <- ih_antvac_append %>%
  filter(mc.number == "0 0 0") # 

count (missing_medicare_ih_antvac_append) # including potential duplicates by year i.e. 20-30, 30-40, 40-50 so double counting for same year


# -------------Checking the duplicate status
count(distinct(missing_medicare_ih_antvac_append, id)) # unique observations


ih_antvac_append <- ih_antvac_append %>%
  filter (!(mc.number == "0 0 0")) # remove those with medicare number missing 


# identify potential duplicates 
ih_antvac_append$mc.number[ih_antvac_append$mc.number == ""] <- NA # formatting the variable to know missing values
print(sum(is.na(ih_antvac_append$mc.number))) #  no missing value


ih_antvac_append <- ih_antvac_append %>%
  arrange(id) %>%
  group_by(id) %>%
  mutate(dup = row_number()) %>%
  ungroup()

# Checking the duplicate status
table(ih_antvac_append$dup) 
print(sum(ih_antvac_append$dup >=2)) # duplicates that will be removed 

# To see individuals with a specific duplicate number, e.g., 2
print(subset(ih_antvac_append, dup == 2))

# Identify individuals with duplicates for visual inspection 
individuals_with_duplicates <- ih_antvac_append %>% # looks fine
  group_by(id) %>%
  filter(n() > 1) %>%
  ungroup()

rm (individuals_with_duplicates)


# Drop duplicates 
ih_antvac_append <- ih_antvac_append %>% filter(!(dup >= 2))

#count(distinct(ih_antvac_append, dup))
table(ih_antvac_append$dup)



#-----------------------------------ih_child_0_10yr------------------------------------------------------------------
# ........................................................................................................................

# Print the updated column names to verify
print(colnames(ih_child_0_10yr))# Adding prefix child_ for df

# To remove the prefix ==  colnames(ih_child_0_10yr) <- sub("^child_", "", colnames(ih_child_0_10yr))

colnames(ih_child_0_10yr) <- paste0("child_", colnames(ih_child_0_10yr))

#....................Identifying born 2018-2024 to identify the women for the study focus .........................
ih_child_0_10yr <- ih_child_0_10yr %>%
  filter(child_birth_year == 2018 | child_birth_year == 2019 | child_birth_year == 2020 | child_birth_year== 2021 | 
           child_birth_year == 2022 | child_birth_year == 2023 | child_birth_year == 2024)

table (ih_child_0_10yr$child_birth_year)


# keeping medicare missing data for record. Non-missing medicare observation will be used for merging pupose with maternal data.
missing_medicare_ih_child_0_10yr <- ih_child_0_10yr_original


missing_medicare_ih_child_0_10yr$child_mc.number[missing_medicare_ih_child_0_10yr$child_mc.number == ""] <- NA # formatting the variable to know missing values
print(sum(is.na(missing_medicare_ih_child_0_10yr$child_mc.number))) #  no missing value

missing_medicare_ih_child_0_10yr <- ih_child_0_10yr %>%
  filter(child_mc.number == "0 0 0") # this includes potential duplicate observations 


# Checking the duplicate status
count(distinct(missing_medicare_ih_child_0_10yr, child_id)) # unique observations


ih_child_0_10yr <- ih_child_0_10yr %>%
  filter (!(child_mc.number == "0 0 0")) # remove those with Medicare number missing 


# identify potential duplicates for the whole data
ih_child_0_10yr$child_mc.number[ih_child_0_10yr$child_mc.number == ""] <- NA # formatting the variable to know missing values
print(sum(is.na(ih_child_0_10yr$child_mc.number))) #  no missing value


ih_child_0_10yr <- ih_child_0_10yr %>%
  arrange(child_id) %>%
  group_by(child_id) %>%
  mutate(dup = row_number()) %>%
  ungroup()

# Checking the duplicate status
table(ih_child_0_10yr$dup) 

# To see individuals with a specific duplicate number, e.g., 2
print(subset(ih_child_0_10yr, dup == 2))
print(sum(ih_child_0_10yr$dup >=2)) # duplicates that will be removed 

# Identify individuals with duplicates for visual inspection 
individuals_with_duplicates <- ih_child_0_10yr %>% # looks fine
  group_by(child_id) %>%
  filter(n() > 1) %>%
  ungroup()

rm (individuals_with_duplicates)


# Drop duplicates 
ih_child_0_10yr <- ih_child_0_10yr %>% filter(!(dup >= 2))

#count(distinct(ih_child_0_10yr, dup))
table(ih_child_0_10yr$dup) 



# -------------------------------Merge IH df with child (0-10 years) via Medicare number ----------------------------------------

ih_child_0_10yr$mednum_digit <- substr(ih_child_0_10yr$child_mc.number, 1,9)
ih_antvac_append$mednum_digit <- substr(ih_antvac_append$mc.number, 1,9)


# preparing the antenatal indicator variable here ie pregnancy == "yes"
pregant_vc <- service_date %>%
  filter (antenatal == "Y")

ih_mother_antenatal <-left_join(ih_antvac_append, pregant_vc, by="id")


ih_mother_antenatal <- ih_mother_antenatal %>%
  arrange(id) %>%
  group_by(id) %>%
  mutate(dup = row_number()) %>%
  ungroup()

# Checking the duplicate status
table(ih_mother_antenatal$dup) 
print(sum(ih_mother_antenatal$dup >=2)) # duplicates that will be removed 

# To see individuals with a specific duplicate number, e.g., 2
print(subset(ih_mother_antenatal, dup == 2))

# Drop duplicates 
ih_mother_antenatal <- ih_mother_antenatal %>% filter(!(dup >= 2))

colnames(ih_mother_antenatal)


rm(service_date)


# ------------------Merging the data (child and mothers)---------------------------------------------------------------------------------------
# Install and load data.table, which is good for large data merging
if (!requireNamespace("data.table", quietly = TRUE)) {
  install.packages("data.table")
}
library(data.table)

# Convert data frames to data tables
setDT(ih_mother_antenatal)
setDT(ih_child_0_10yr)

# Perform a full join with many-to-many relationship explicitly defined
ih_mother_child_merged <- full_join(ih_mother_antenatal, ih_child_0_10yr, by = "mednum_digit", relationship = "many-to-many")

# Adjust mutate to use the correct column names based on the full join result
ih_mother_child_merged <- ih_mother_child_merged %>%
  mutate(mergstat = case_when(
    !is.na(id) & !is.na(child_id) ~ "both",           
    !is.na(id) & is.na(child_id) ~ "only mother",     
    is.na(id) & !is.na(child_id) ~ "only child",  
    TRUE ~ "unknown"
  ))

table (ih_mother_child_merged$mergstat)


# just for double checking and for the information; where "inner_join" has a similar outcome with those merged in both
ih_mamchild_ij_merged <- left_join(ih_mother_antenatal, ih_child_0_10yr, by = "mednum_digit" , relationship = "many-to-many")
count(ih_mamchild_ij_merged)

# Check the duplicate observations
ih_mamchild_ij_merged  <- ih_mamchild_ij_merged %>%
  arrange(id) %>%
  group_by(id) %>%
  mutate(dup = row_number()) %>%
  ungroup()

table (ih_mamchild_ij_merged$dup)
print(sum(ih_mamchild_ij_merged$dup >=2)) # duplicates that will be removed 


# Checking the duplicate status
count(distinct(ih_mamchild_ij_merged, id)) # unique observations

rm (ih_mamchild_ij_merged)


str(ih_mother_child_merged$child_dob) # child_dob is in a date format

ih_mother_child_merged <- ih_mother_child_merged %>%
  mutate(child_age_yr = year(child_dob))


table (ih_mother_child_merged$child_age_yr)

# keep children not linked with women for record
ih_child_not_linked <- ih_mother_child_merged %>% 
  filter((mergstat == "only child"))

# for record: keep women not linked with  children or not reported as pregnant in AIR 
ih_women_not_linked <- ih_mother_child_merged %>% 
  filter(mergstat == "only mother") %>% 
  filter(is.na(antenatal)) # remove those women reported pregnant


# keep women who have child match or pregnancy reported via AIR 
# 3320 unique women added via (antenatal == "Y") because of reporting pregnancy in AIR but not linked with child and this could be because of not still giving birth or pregnancy loss. 

ih_mother_child_merged <-  ih_mother_child_merged %>% 
  filter ((mergstat == "both") | (antenatal == "Y")) 

count(distinct(ih_mother_child_merged, id))


table (ih_mother_child_merged$child_age_yr)


# Estimates looks reasonable compared to the WA birth , which is around 30,000 
# https://www.wa.gov.au/organisation/department-of-justice/the-registry-of-births-deaths-and-marriages/statistics-births-deaths-and-marriages-registered


# -----------------Duplicates by service.date and vaccine type in df = vc_antvac_append----------------------
# Checking missing values per variable 

# For service.date
vc_antvac_append$service.date[vc_antvac_append$service.date == ""] <- NA # formatting the variable to know missing values
print(sum(is.na(vc_antvac_append$service.date))) # no missing value

# For vaccine
vc_antvac_append$vaccine[vc_antvac_append$vaccine == ""] <- NA # formatting the variable to know missing values
print(sum(is.na(vc_antvac_append$vaccine))) #  one missing value


vc_antvac_append <- vc_antvac_append %>%
  arrange(id, service.date, vaccine) %>%
  group_by(id, service.date, vaccine) %>%
  mutate(dupsv = row_number()) %>%
  ungroup()


# Checking the duplicate status
table(vc_antvac_append$dupsv)

# To see individuals with a specific duplicate number, e.g., 2
print(subset(vc_antvac_append, dupsv == 2))
print(sum(vc_antvac_append$dupsv >=2)) # duplicates that will be removed 

vc_antvac_append <- vc_antvac_append %>% filter(!(vc_antvac_append$dupsv >= 2))

str(vc_antvac_append$dob)


# -----------------limit the data to Perth Metro---------------------------------

# Define the postcode regions
# please not the source for postcodes below is from the 
# C:\Users\he227319\WA Health\Boorloo PHU Public Health Intelligence - PHIntelligence\dataRepository\Population and Mapping\Postcode_PHU_LGA_HR_HS_SA3_SA4.xlsx

# import the excel file as a df
postcode_wa <- read_excel("C:/Users/he227319/WA Health/Boorloo PHU Public Health Intelligence - PHIntelligence/dataRepository/Population and Mapping/Postcode_PHU_LGA_HR_HS_SA3_SA4.xlsx")

# Check the first few rows of the dataframe
str(postcode_wa)

colnames(postcode_wa) <- tolower(colnames(postcode_wa))
head(postcode_wa)

table (postcode_wa$"health service (operation)")

# merge this with ih_antvac_append df

# Perform a left join: The many-to-many relationship is handled automatically by left_join.
# The postcode format must be the same: 
# Convert postcode to numeric if it's not already

str(ih_antvac_append$postcode) 

ih_antvac_append <- ih_antvac_append %>%
  mutate(postcode = as.numeric(as.character(postcode)))

str(postcode_wa$postcode) 

postcode_wa <- postcode_wa %>%
  mutate(postcode = as.numeric(as.character(postcode)))


# Merging the data: NB_ many-to-many relationship is handled automatically by left_join.
ih_antvac_postcode_merge <- left_join(ih_mother_child_merged, postcode_wa, by = "postcode")

# Check the first few rows of the merged dataframe
head(ih_antvac_postcode_merge)
str(ih_antvac_postcode_merge)

table (ih_antvac_postcode_merge$"health service (operation)")
table(ih_antvac_postcode_merge$`health service (operation)`, useNA = "ifany") # missing values included

# Define the metrophu postcodes by two group 
# please note some of the codes are P O Boxes only i.e. for individuals did not have Address "6800, 6809, 6827, 6830:6832, 6837:6850, 6865, 6872, 6892, 6900:6999"

metrophu <- c(6000:6040, 6045:6090, 6100:6215, 6556:6558, 6800, 6809, 6827, 6830:6832, 6837:6850, 6865, 6872, 6892, 6900:6999)

# Create the postcodegrp2 variable using ifelse
ih_antvac_postcode_merge$postcodegrp2 <- ifelse(ih_antvac_postcode_merge$postcode %in% metrophu, "metrophu", "non-Metro_WACHS")
table (ih_antvac_postcode_merge$postcodegrp2, useNA = "ifany")



# -----------------------------------------Merging with vc df -----------------------------------------

# Keep only pertinent variables from vc data that can be merged with ih df

vc_antvac_append$year<-as.Date(vc_antvac_append$service.date, "%d/%m/%Y")
str(vc_antvac_append$year)

# Convert to year
vc_antvac_append$year <- format(vc_antvac_append$year, "%Y")

table(vc_antvac_append$year)

# keep the year we are interested in
# please note this women have any vaccination history (as evidenced via service date) between 2019 & 2024

vc_antvac_append <- vc_antvac_append %>%
  filter(year == 2019 | year == 2020 | year == 2021 | year == 2022 | year == 2023 | year == 2024)

table(vc_antvac_append$year)

vc_antvac_append$year <- NULL


unique_vc_antvac_append <- vc_antvac_append %>% 
  select(-report.individual.id, -surname, -given.name, -gender, -overdue, -mc.number, -init, -dob)

table (unique_vc_antvac_append$antenatal)



#remove date from vc_antnatal

vc_antvac_append$year <- NULL


# Convert data frames to data tables
library(data.table)

setDT(unique_vc_antvac_append )


# Perform a full join with many-to-many relationship explicitly defined
# Create copy of ID for 
ih_mamchild_matched <- ih_mamchild_matched %>%
  mutate(idih = id)

unique_vc_antvac_append  <- unique_vc_antvac_append  %>%
  mutate(idvc = id)

# Merging the data
ancvac_ihvc_merged <- full_join(ih_mamchild_matched, unique_vc_antvac_append , by = "id", relationship = "many-to-many")

colnames(ancvac_ihvc_merged)

rm (unique_vc_antvac_append)

# Adjust mutate to use the correct column names based on the full join result
ancvac_ihvc_merged <- ancvac_ihvc_merged %>%
  mutate(mergstatihvc = case_when(
    !is.na(idih) & !is.na(idvc) ~ "both",           
    !is.na(idih) & is.na(idvc) ~ "IH only",     
    is.na(idih) & !is.na(idvc) ~ "VC only",  
    TRUE ~ "unknown"
  ))

table(ancvac_ihvc_merged$mergstatihvc)

# keep observations that matched with women and child 
ancvac_ihvc_matched <- ancvac_ihvc_merged %>% 
  filter (mergstatihvc == "both")


# -----------------------------------------Merging with pd df -----------------------------------------

# It will be merged using three variables: prov.type and prov.number
# rename some of the variables for merging

table (pd_antvac_append$prov.type)
colnames(pd_antvac_append)


colnames(ancvac_ihvc_matched)
table (ancvac_ihvc_matched$vacc.prov.type)

ancvac_ihvc_matched  <- ancvac_ihvc_matched %>% 
  rename(prov.type = vacc.prov.type, prov.number= vacc.prov.number)

colnames(ancvac_ihvc_matched)


# identify the missing value status for variables used for merging

pd_antvac_append$prov.type[pd_antvac_append$prov.type == ""] <- NA # formatting the variable to know missing values
print(sum(is.na(pd_antvac_append$prov.type))) #  no missing value

pd_antvac_append$prov.number[pd_antvac_append$prov.number == ""] <- NA # formatting the variable to know missing values
print(sum(is.na(pd_antvac_append$prov.number))) #  no missing value


ancvac_ihvc_matched$prov.type[ancvac_ihvc_matched$prov.type == ""] <- NA # formatting the variable to know missing values
print(sum(is.na(ancvac_ihvc_matched$prov.type))) #  no missing value

ancvac_ihvc_matched$prov.number[ancvac_ihvc_matched$prov.number == ""] <- NA # formatting the variable to know missing values
print(sum(is.na(ancvac_ihvc_matched$prov.number))) #  no missing value


# save the data in case R stops or busy so will have a back up.
save.image("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Analysis/Merged data_AntVac.RData")


# Convert data frames to data tables
library(data.table)
setDT(pd_antvac_append)


# Perform a full join with many-to-many relationship explicitly defined-----------------------------------------------------------------------------------------

ancvac_ihvcpd_merged <- left_join(ancvac_ihvc_matched, pd_antvac_append, by = c("prov.type", "prov.number"), relationship = "many-to-many")
str(ancvac_ihvcpd_merged)

print(sum(is.na(ancvac_ihvcpd_merged$prov.number))) #  no missing value; looks the merging was good 
print(sum(is.na(ancvac_ihvcpd_merged$postcode))) #  no missing value: looks the merging was good 

 count (ancvac_ihvcpd_merged) # 11907645
 
 
 # there are some duplicate observations while merging with pd data and do some initial analysis to remove those with same vaccine on same date 
 
 ancvac_ihvcpd_merged <- ancvac_ihvcpd_merged %>%
   arrange(id, child_dob, vaccine, service.date) %>%
   group_by(id, child_dob, vaccine, service.date) %>%
   mutate(dupsv_type = row_number()) %>%
   ungroup()
 
 table (ancvac_ihvcpd_merged$dupsv_type)
 
 
 ancvac_ihvcpd_merged <- ancvac_ihvcpd_merged %>%
   filter(dupsv_type == 1)
 

save.image("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Analysis/Merged data_AntVac.RData")



# ........................................................................................................................
# ----------------------------Pregnancy status ----------------------------------------------------------------------------------
# _______________________________________________________________________________________________________________________________

save.image("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Analysis/Pregnant Cohort_AntVac.RData")


# remove some of the df to clean the workspace 
# List all data frames in the global environment
dfs <- ls()
dfs <- dfs[sapply(dfs, function(x) is.data.frame(get(x)))]

# Print the names of data frames
print(dfs)

# List all data frames with their dimensions
dfs_info <- sapply(dfs, function(x) dim(get(x)))
print(dfs_info)

rm (dfs, dfs_info)


# remove some df to keep the environment more convenient 
rm(ancvac_ihvc_merged, ancvac_ihvc_matched, ih_antvac_append, ih_antvac_postcode_merge, ih_child_0_10yr, 
   ih_mamchild_matched, ih_mamchild_merged, missing_medicare_ih_antvac_append, 
   missing_medicare_ih_child_0_10yr, vc_antvac_append, check_columns, metrophu)

gc() # garbage collection to clean the workspace 



 # Average length of pregnancy using 40 weeks // https://www.acog.org/womens-health/experts-and-stories/ask-acog/how-long-does-pregnancy-last
 
 # Identifying the pregnancy status 
 
 
 # Convert the dates to Date format
 str(ancvac_ihvcpd_merged$child_dob) # Date format and no need to convert
 
 str(ancvac_ihvcpd_merged$service.date) # is chr 
 ancvac_ihvcpd_merged$service.date <- as.Date(ancvac_ihvcpd_merged$service.date, "%d/%m/%Y")
 
 # Calculate the time difference in weeks
 ancvac_ihvcpd_merged$time_diff_weeks <- as.numeric(difftime(ancvac_ihvcpd_merged$child_dob, ancvac_ihvcpd_merged$service.date, units = "days")) / 7
 ancvac_ihvcpd_merged$time_diff_years <- floor(as.numeric(difftime(ancvac_ihvcpd_merged$child_dob, ancvac_ihvcpd_merged$service.date, units = "days")) / 365.25)
 
 mean (ancvac_ihvcpd_merged$time_diff_weeks)
 
 # View the result
 head(ancvac_ihvcpd_merged$time_diff_weeks)
 
 ancvac_ihvcpd_merged <- ancvac_ihvcpd_merged %>%
   mutate(pregstat42wks = case_when(
     is.na(time_diff_weeks) ~ "Missing",
     time_diff_weeks >= 0 & time_diff_weeks <= 42 ~ "Yes",
     TRUE ~ "No"
   ))
 
 ancvac_ihvcpd_merged <- ancvac_ihvcpd_merged %>%
   mutate(pregstat_37wks = case_when(
     is.na(time_diff_weeks) ~ "Missing",
     time_diff_weeks >= 0 & time_diff_weeks <= 37 ~ "Yes",
     TRUE ~ "No"
   ))
 
 
 table(ancvac_ihvcpd_merged$time_diff_years)
 
 table(ancvac_ihvcpd_merged$pregstat42wks)   # 316497    with Yes
 table(ancvac_ihvcpd_merged$pregstat_37wks)  # 302612  with Yes
 
 # Inspecting the output visually to check that makes sense: it looks right 
 temp_ancvac <- ancvac_ihvcpd_merged %>% select(id, dob, service.date, child_dob, time_diff_weeks, time_diff_years, child_birth_year, pregstat42wks, pregstat_37wks)
 #view(temp_ancvac)
 
 # keep the pregancy "Yes" responses 
 temp_preg_yes <- temp_ancvac %>% 
   filter(pregstat42wks== "Yes")
 
 #view(temp_preg_yes)
 
 table (temp_preg_yes$child_birth_year)
 
 
 rm(temp_ancvac, temp_preg_yes) # remove temporary files 
 
 


# Keep women who were pregnant only ----------------------------------------------------------------------------------
table(ancvac_ihvcpd_merged$pregstat42wks)   # 316264 with Yes

preg_cohort <- ancvac_ihvcpd_merged %>%
  filter(pregstat42wks== "Yes")

table (preg_cohort$child_birth_year)



# ----------------------------Pregnancy status vaccination ----------------------------------------------------------------------------------

table(preg_cohort$vaccine) # check each vaccine names and their frequency

preg_cohort <- preg_cohort %>%
  mutate(pregvac = case_when(
    vaccine %in% c("Flucelvax Quad", "Fluarix", "Fluarix Tetra", "Vaxigrip", "Vaxigrip Tetra", "Vaxigrip Junior") ~ "Flu",
    vaccine %in% c("Adacel", "Boostrix") ~ "Pertusis",
    !is.na(vaccine) ~ "No",
    TRUE ~ NA_character_
  ))

table (preg_cohort$pregvac)


preg_cohort <- preg_cohort %>%
  mutate(vac_pf = case_when(
    vaccine %in% c("Flucelvax Quad", "Fluarix", "Fluarix Tetra", "Vaxigrip", "Vaxigrip Tetra", " Vaxigrip Junior",
                   "FluQuadri", " FluQuadri Junior", "Influvac Tetra", "Fluvax", "Fluvax Junior", "Generic Influenza", "Afluria Quad", " FluQuadri", "Influvac") ~ "Flu_all",
    vaccine %in% c("Adacel", "Boostrix", "Boostrix IPV", " Adacel Polio", "Generic DTPa") ~ "Pertusis",
    !is.na(vaccine) ~ "No",
    TRUE ~ NA_character_
  ))

table (preg_cohort$vac_pf)


CrossTable(preg_cohort$pregvac, preg_cohort$child_birth_year, prop.r = FALSE, prop.c = TRUE, prop.t = FALSE, 
           prop.chisq = FALSE, missing.include = TRUE, format = "SPSS", digits = 2)

CrossTable(preg_cohort$vac_pf, preg_cohort$child_birth_year, prop.r = FALSE, prop.c = TRUE, prop.t = FALSE, 
           prop.chisq = FALSE, missing.include = TRUE, format = "SPSS", digits = 2)



#------------------------Flu Cohort________________________________________________________________________
#---------------------------------_________________________________________________________________________

Flu_preg_cohort <- preg_cohort %>%
  mutate(flu_vac = case_when(
    vaccine %in% c("Flucelvax Quad", "Fluarix", "Fluarix Tetra", "Vaxigrip", "Vaxigrip Tetra", "FluQuadri", " FluQuadri Junior", "Influvac Tetra", "Fluvax", "Fluvax Junior", 
                   "Vaxigrip Junior", "Generic Influenza", "Afluria Quad", " FluQuadri", "Influvac") ~ "Yes",
    !is.na(vaccine) ~ "No",
    TRUE ~ NA_character_))

table (Flu_preg_cohort$flu_vac)

table(Flu_preg_cohort$vaccine)


# Limited for pregnant prescribed medicines only (based on the meeting discussion)
Flu_preg_cohort <- Flu_preg_cohort %>%
  mutate(preg_flu_vac = case_when(
    vaccine %in% c("Flucelvax Quad", "Fluarix", "Fluarix Tetra", "Vaxigrip", "Vaxigrip Tetra", "Vaxigrip Junior") ~ "Yes",
    !is.na(vaccine) ~ "No",
    TRUE ~ NA_character_
  ))

table (Flu_preg_cohort$preg_flu_vac)


# change flu_vac as numeric 
Flu_preg_cohort <- Flu_preg_cohort %>%
  mutate(flu_vac_num = case_when(
    flu_vac == "Yes" ~ 1,
    flu_vac == "No" ~ 2,
    is.na(flu_vac) ~ 99,
    TRUE ~ NA_real_
  ))
table (Flu_preg_cohort$flu_vac_num)

# identify the service closer to average pregnancy time i.e. use absolute values to identify closest observations
Flu_preg_cohort <-  Flu_preg_cohort %>%
  mutate(mean_var = mean(time_diff_weeks)) %>%
  mutate(mean_closer = abs(mean_var - time_diff_weeks))

# generate duplicates 
Flu_preg_cohort <- Flu_preg_cohort %>%
  arrange(id, child_dob, flu_vac_num, mean_closer) %>%
  group_by(id, child_dob, flu_vac_num) %>%
  mutate(dupflu = row_number()) %>%
  ungroup()

table (Flu_preg_cohort$dupflu)


# check the data via visual inspection
temp_Flu_preg_cohort <- Flu_preg_cohort %>%
  select(dupflu, flu_vac, vaccine, id, child_dob, service.date, dob, time_diff_weeks, mean_closer, time_diff_years, child_birth_year, pregstat42wks, pregstat_37wks)  # looks good

rm(temp_Flu_preg_cohort)

# keep dupflu==1 and flu_vac          
Flu_preg_cohort <- Flu_preg_cohort %>%
  filter(flu_vac == "Yes" | dupflu==1)

table (Flu_preg_cohort$dupflu)

count(Flu_preg_cohort) #  267859

# check the data via visual inspection
temp_Flu_preg_cohort <- Flu_preg_cohort %>%
  select(dupflu, flu_vac, id, child_dob, service.date, dob, time_diff_weeks, mean_closer, time_diff_years, child_birth_year, pregstat42wks, pregstat_37wks)  # looks good

rm(temp_Flu_preg_cohort)


# drop those individuals with already vaccinated for flu and also having duplicate observations for flu vaccine 

Flu_preg_cohort <- Flu_preg_cohort %>%
  arrange(id, child_dob, flu_vac_num, mean_closer) %>%
  group_by(id, child_dob, dupflu) %>%
  mutate(dup_dup = row_number()) %>%
  ungroup()

table (Flu_preg_cohort$dup_dup)
table(Flu_preg_cohort$flu_vac[Flu_preg_cohort$dup_dup >=2]) # np duplicates for flu for same preganancy as it has been removed above for similar observations (duplicates). This applies for all medication

# check the data via visual inspection
temp_Flu_preg_cohort <- Flu_preg_cohort %>%
  select(dup_dup, dupflu, flu_vac, id, child_dob, service.date, dob, time_diff_weeks, mean_closer, time_diff_years, child_birth_year, pregstat42wks, pregstat_37wks)  # looks good

rm(temp_Flu_preg_cohort)


# keep ddup_dup==1 and flu_vac          
Flu_preg_cohort <- Flu_preg_cohort %>%
  filter(flu_vac == "Yes" | dup_dup ==1)

table (Flu_preg_cohort$dup_dup)

count(Flu_preg_cohort) #  177765


## drop some observations that have >=2 flu on same preganancy

Flu_preg_cohort <- Flu_preg_cohort %>%
  arrange(id, child_dob, flu_vac_num, mean_closer) %>%
  group_by(id, child_dob) %>%
  mutate(dup_dup = row_number()) %>%
  ungroup()

table (Flu_preg_cohort$dup_dup)

# check the data via visual inspection
temp_Flu_preg_cohort <- Flu_preg_cohort %>%
  select(dup_dup, flu_vac, id, child_dob, service.date, dob, time_diff_weeks, mean_closer, time_diff_years, child_birth_year, pregstat42wks, pregstat_37wks)  # looks good

rm(temp_Flu_preg_cohort)

#keep dup_dup==1    

Flu_preg_cohort <- Flu_preg_cohort %>%
  filter(dup_dup ==1)


count(Flu_preg_cohort) #  175919



CrossTable(Flu_preg_cohort$flu_vac, Flu_preg_cohort$child_birth_year, prop.r = FALSE, prop.c = TRUE, prop.t = FALSE, 
           prop.chisq = FALSE, missing.include = TRUE, format = "SPSS", digits = 2)

CrossTable(Flu_preg_cohort$preg_flu_vac, Flu_preg_cohort$child_birth_year, prop.r = FALSE, prop.c = TRUE, prop.t = FALSE, 
           prop.chisq = FALSE, missing.include = TRUE, format = "SPSS", digits = 2)




#------------------------Pertussis Cohort________________________________________________________________________
#----------------------------------------________________________________________________________________________

pertussis_preg_cohort <- preg_cohort %>%
  mutate(pertussis_vac = case_when(
    vaccine %in% c("Adacel", "Boostrix", "Boostrix IPV", " Adacel Polio", "Generic DTPa") ~ "Yes",
    !is.na(vaccine) ~ "No",
    TRUE ~ NA_character_ ))

table (pertussis_preg_cohort$pertussis_vac)
table(pertussis_preg_cohort$vaccine)

# Limited for pregnant prescribed medicines only (based on the meeting discussion)
pertussis_preg_cohort <- pertussis_preg_cohort %>%
  mutate(preg_pertussis_vac = case_when(
    vaccine %in% c("Adacel", "Boostrix") ~ "Yes",
    !is.na(vaccine) ~ "No",
    TRUE ~ NA_character_ ))

table(pertussis_preg_cohort$preg_pertussis_vac)

# change pertussis_vac as numeric 
pertussis_preg_cohort <- pertussis_preg_cohort %>%
  mutate(pertussis_vac_num = case_when(
    pertussis_vac == "Yes" ~ 1,
    pertussis_vac == "No" ~ 2,
    is.na(pertussis_vac) ~ 99,
    TRUE ~ NA_real_
  ))
table (pertussis_preg_cohort$pertussis_vac_num)

# identify the service closer to average pregnancy time i.e. use absolute values to identify closest observations
pertussis_preg_cohort <-  pertussis_preg_cohort %>%
  mutate(mean_var = mean(time_diff_weeks)) %>%
  mutate(mean_closer = abs(mean_var - time_diff_weeks))

# generate duplicates 
pertussis_preg_cohort <- pertussis_preg_cohort %>%
  arrange(id, child_dob, pertussis_vac_num, mean_closer) %>%
  group_by(id, child_dob, pertussis_vac_num) %>%
  mutate(dup_pertussis = row_number()) %>%
  ungroup()

table (pertussis_preg_cohort$dup_pertussis)


# check the data via visual inspection
temp_pertussis_preg_cohort <- pertussis_preg_cohort %>%
  select(dup_pertussis, pertussis_vac, id, child_dob, service.date, dob, time_diff_weeks, mean_closer, time_diff_years, child_birth_year, pregstat42wks, pregstat_37wks)  # looks good

rm(temp_pertussis_preg_cohort)

# keep dup_pertussis==1 and pertussis_vac          
pertussis_preg_cohort <- pertussis_preg_cohort %>%
  filter(pertussis_vac == "Yes" | dup_pertussis==1)

table (pertussis_preg_cohort$dup_pertussis)

count(pertussis_preg_cohort) # 272645

# check the data via visual inspection
temp_pertussis_preg_cohort <- pertussis_preg_cohort %>%
  select(dup_pertussis, pertussis_vac, id, child_dob, service.date, dob, time_diff_weeks, mean_closer, time_diff_years, child_birth_year, pregstat42wks, pregstat_37wks)  # looks good

rm(temp_pertussis_preg_cohort)


# drop those individuals with already vaccinated for pertussis and also having duplicate observations for pertussis vaccine 

pertussis_preg_cohort <- pertussis_preg_cohort %>%
  arrange(id, child_dob, pertussis_vac_num, mean_closer) %>%
  group_by(id, child_dob, dup_pertussis) %>%
  mutate(dup_dup = row_number()) %>%
  ungroup()

table (pertussis_preg_cohort$dup_dup)
table(pertussis_preg_cohort$pertussis_vac[pertussis_preg_cohort$dup_dup >=2]) # No duplicates for pertussis for same preganancy as it has been removed above for similar observations (duplicates). This applies for all medication

# check the data via visual inspection
temp_pertussis_preg_cohort <- pertussis_preg_cohort %>%
  select(dup_dup, dup_pertussis, pertussis_vac, id, child_dob, service.date, dob, time_diff_weeks, mean_closer, time_diff_years, child_birth_year, pregstat42wks, pregstat_37wks)  # looks good

rm(temp_pertussis_preg_cohort)


# keep ddup_dup==1 and pertussis_vac          
pertussis_preg_cohort <- pertussis_preg_cohort %>%
  filter(pertussis_vac == "Yes" | dup_dup ==1)

table (pertussis_preg_cohort$dup_dup)

count(pertussis_preg_cohort) #  176870 


## drop some observations that have >=2 pertussis on same pregnancy

pertussis_preg_cohort <- pertussis_preg_cohort %>%
  arrange(id, child_dob, pertussis_vac_num, mean_closer) %>%
  group_by(id, child_dob) %>%
  mutate(dup_dup = row_number()) %>%
  ungroup()

table (pertussis_preg_cohort$dup_dup)

# check the data via visual inspection
temp_pertussis_preg_cohort <- pertussis_preg_cohort %>%
  select(dup_dup, dup_pertussis, pertussis_vac, id, child_dob, service.date, dob, time_diff_weeks, mean_closer, time_diff_years, child_birth_year, pregstat42wks, pregstat_37wks)  # looks good

rm(temp_pertussis_preg_cohort)

#keep ddup_dup==1    

pertussis_preg_cohort <- pertussis_preg_cohort %>%
  filter(dup_dup ==1)

count(pertussis_preg_cohort) #  175793

CrossTable(pertussis_preg_cohort$pertussis_vac, pertussis_preg_cohort$child_birth_year, prop.r = FALSE, prop.c = TRUE, prop.t = FALSE, 
           prop.chisq = FALSE, missing.include = TRUE, format = "SPSS", digits = 1)

CrossTable(pertussis_preg_cohort$preg_pertussis_vac, pertussis_preg_cohort$child_birth_year, prop.r = FALSE, prop.c = TRUE, prop.t = FALSE, 
           prop.chisq = FALSE, missing.include = TRUE, format = "SPSS", digits = 1)

colnames (pertussis_preg_cohort)



# ........................................................................................................................
# ---------------------------------------Analysis: Description----------------------------------------------------------------------------------------
# ........................................................................................................................

# NB: the analysis for flu and pertussis should be done separately as some characteristics such as date of vaccination, facility and other characteristics could vary. 



# ---------------------------------------Flu Cohort Analysis: Description----------------------------------------------------------------------------------------


colnames(Flu_preg_cohort)

table(Flu_preg_cohort$prov.type)
table(Flu_preg_cohort$prov.bus.name)

table(Flu_preg_cohort$child_birth_year)

table(Flu_preg_cohort$"health region (operation)")
table(Flu_preg_cohort$"health service (operation)")
table(Flu_preg_cohort$"public health unit")

# Cohorts for data analysis i.e. limited by time (year 2019-2024) and some selected variables
Flu_analysis1924 <- Flu_preg_cohort %>% 
  filter (child_birth_year == 2019 | child_birth_year == 2020 | child_birth_year == 2021 | child_birth_year == 2022 | child_birth_year == 2023 | child_birth_year == 2024) %>% 
  select (id, indigenous, cbirth, sa3_code16, postcodegrp2, child_gender, pregstat_37wks, flu_vac, sa3_name16, child_indigenous, service.date, prov.bus.name, 
          vaccine.code, vaccine, school.name, sa4_name16, sa4_code16, lga_code20, lga_name20, child_birth_year, vaccine.type, time_diff_weeks, mean_closer, dob, 
          "health region (operation)", "health service (operation)", prov.type, postcode, prov.postcode, "public health unit", child_dob, vacc.batch.number, 
          prov.number, pregstat42wks, dose, child_cbirth, route.of.administration)

table(Flu_analysis1924$child_birth_year)

colnames(Flu_analysis1924)

count(Flu_analysis1924) #  136059

# vaccination patterns 
#create another variable using var = vaccine


# ---------------------------------------Pertussis Cohort Analysis: Description----------------------------------------------------------------------------------------

colnames(pertussis_preg_cohort)

table(pertussis_preg_cohort$prov.type)
table(pertussis_preg_cohort$prov.bus.name)

table(pertussis_preg_cohort$child_birth_year)

table(pertussis_preg_cohort$"health region (operation)")
table(pertussis_preg_cohort$"health service (operation)")
table(pertussis_preg_cohort$"public health unit")

# Cohorts for data analysis i.e. limited by time (year 2019-2024) and some selected variables
pertussis_analysis1924 <- pertussis_preg_cohort %>% 
  filter (child_birth_year == 2019 | child_birth_year == 2020 | child_birth_year == 2021 | child_birth_year == 2022 | child_birth_year == 2023 | child_birth_year == 2024) %>% 
  select (id, indigenous, cbirth, sa3_code16, postcodegrp2, child_gender, pregstat_37wks, pertussis_vac, sa3_name16, child_indigenous, service.date, prov.bus.name, 
          vaccine.code, vaccine, school.name, sa4_name16, sa4_code16, lga_code20, lga_name20, child_birth_year, vaccine.type, time_diff_weeks, mean_closer, dob, 
          "health region (operation)", "health service (operation)", prov.type, postcode, prov.postcode, "public health unit", child_dob, vacc.batch.number, 
          prov.number, pregstat42wks, dose, child_cbirth, route.of.administration)

table(pertussis_analysis1924$child_birth_year)

colnames(pertussis_analysis1924)

count(pertussis_analysis1924) #  136059


# ---------------------------------------Vaccination Pattern Analysis: Description----------------------------------------------------------------------------------------


# merging flu and pertussis df 

# add suffix to the pertussis df so that we can identify those from this df so that in case of flu missing we can use to assess the pattern
# rename the variables (id & child dob) that used for merging 

tem_pertussis_analysis1924 <- pertussis_analysis1924 %>% 
  rename_with(~ paste0(., "_pertussis")) 

colnames(pertussis_analysis1924)

tem_pertussis_analysis1924 <- tem_pertussis_analysis1924 %>% 
  mutate(id=id_pertussis, child_dob = child_dob_pertussis)

colnames(tem_pertussis_analysis1924)

Flu_analysis1924 <- Flu_analysis1924 %>% 
  mutate(idflu=id, child_dobflu = child_dob)

# merging the two df --------------------------------

pattern_analysis1924 <- full_join(Flu_analysis1924, tem_pertussis_analysis1924, by = c("id", "child_dob"))

count(pattern_analysis1924)

colnames(pattern_analysis1924)

rm (tem_pertussis_analysis1924)


# Adjust mutate to use the correct column names based on the full join result
pattern_analysis1924 <- pattern_analysis1924 %>%
  mutate(mergstat = case_when(
    !is.na(idflu) & !is.na(id_pertussis) ~ "both",           
    !is.na(idflu) & is.na(id_pertussis) ~ "flu only",     
    is.na(idflu) & !is.na(id_pertussis) ~ "pertussis only",  
    TRUE ~ "unknown"
  ))

table(pattern_analysis1924$mergstat)

colnames(pattern_analysis1924)

# Vaccination patterns 
pattern_analysis1924 <- pattern_analysis1924 %>%
  mutate(vac_pattern = case_when(
    flu_vac == "Yes" & pertussis_vac_pertussis == "Yes" ~ "Both",
    flu_vac == "Yes" & pertussis_vac_pertussis == "No" ~ "Flu only",
    flu_vac == "No" & pertussis_vac_pertussis == "Yes" ~ "Pertussis only",
    flu_vac == "No" & pertussis_vac_pertussis == "No" ~ "No",
    is.na(flu_vac) & is.na(pertussis_vac_pertussis) ~ NA_character_,
    TRUE ~ NA_character_
  ))

table(pattern_analysis1924$vac_pattern)

# creating country of birth status variable

pattern_analysis1924$cbirth[pattern_analysis1924$cbirth == ""] <- NA # formatting the variable to know missing values
print(sum(is.na(pattern_analysis1924$cbirth))) #   122841 missing value


pattern_analysis1924 <- pattern_analysis1924 %>%
  mutate(cbirth_g2 = case_when(
    cbirth == "Australia" ~ "Australia",
    is.na(cbirth) ~ "Missing",
    cbirth != "Australia" & !is.na(cbirth) ~ "Overseas"
  ))

sum(is.na(pattern_analysis1924$cbirth))
table(pattern_analysis1924$cbirth_g2)

colnames(pattern_analysis1924)

table(pattern_analysis1924$prov.type)


pattern_analysis1924$prov.type[pattern_analysis1924$prov.type == ""] <- NA # formatting the variable to know missing values
print(sum(is.na(pattern_analysis1924$prov.type))) #   No missing value


pattern_analysis1924 <- pattern_analysis1924 %>%
  mutate(provider_type_group = case_when(
    prov.type == "MEDICARE GP" | prov.type == "GENERAL PRACTICE" ~ "GP",
    prov.type == "PHARMACY" ~ "Pharmacy",
    prov.type == "MIDWIFE" ~ "Midwife",
    prov.type == "ABORIGINAL HEALTH SERVICE" ~ "Aboriginal Health Service",
    prov.type == "PUBLIC HOSPITAL" | prov.type == "PRIVATE HOSPITAL" ~ "Hospital",
    is.na(prov.type) ~ NA_character_,
    TRUE ~ "Other"
  ))

table(pattern_analysis1924$provider_type_group)

# PD might be yes for unvaccinated women due to vaccination status is not missing i.e. PD will be available for other vaccine types, which will not be assessed in this analysis 
# so that we will change flu or pertussis unvaccinated ones as missing value 

 pattern_analysis1924 <- pattern_analysis1924 %>%
       mutate(provider_type_group = case_when(
             vac_pattern == "No" ~ NA,
             TRUE ~ provider_type_group))
 
 table(pattern_analysis1924$provider_type_group)
 

# Tabulate frequency and proportion
library(janitor)

pattern_analysis1924 %>%
  tabyl(prov.type) %>%
  adorn_totals("row") %>%
  adorn_pct_formatting(digits = 1)

pattern_analysis1924 %>%
  tabyl(provider_type_grouped) %>%
  adorn_totals("row") %>%
  adorn_pct_formatting(digits = 1)


pattern_analysis1924 %>%
  tabyl(vac_pattern) %>%
  adorn_totals("row") %>%
  adorn_pct_formatting(digits = 1)


CrossTable(pattern_analysis1924$vac_pattern, pattern_analysis1924$postcodegrp2, prop.r = FALSE, prop.c = TRUE, prop.t = FALSE, 
           prop.chisq = FALSE, missing.include = TRUE, format = "SPSS", digits = 1)

CrossTable(pattern_analysis1924$vac_pattern, pattern_analysis1924$child_birth_year, prop.r = FALSE, prop.c = TRUE, prop.t = FALSE, 
           prop.chisq = FALSE, missing.include = TRUE, format = "SPSS", digits = 1)

CrossTable(pattern_analysis1924$vac_pattern, pattern_analysis1924$indigenous, prop.r = FALSE, prop.c = TRUE, prop.t = FALSE, 
           prop.chisq = FALSE, missing.include = TRUE, format = "SPSS", digits = 1)

# Given all unvaccinated are missing for provider, it needs a bit tweak on the code 
temp_pattern <- pattern_analysis1924 %>%
  filter(!is.na(provider_type_group))
CrossTable(temp_pattern$vac_pattern, temp_pattern$provider_type_group , prop.r = FALSE, prop.c = TRUE, prop.t = FALSE, 
           prop.chisq = FALSE, missing.include = TRUE, format = "SPSS", digits = 1)
rm (temp_pattern)

#CrossTable(pattern_analysis1924$vac_pattern, pattern_analysis1924$provider_type_group , prop.r = FALSE, prop.c = TRUE, prop.t = FALSE, prop.chisq = FALSE, missing.include = TRUE, format = "SPSS", digits = 1)

CrossTable(pattern_analysis1924$vac_pattern, pattern_analysis1924$cbirth_g2, prop.r = FALSE, prop.c = TRUE, prop.t = FALSE, 
           prop.chisq =TRUE, missing.include = FALSE, format = "SPSS", digits = 1)


CrossTable(pattern_analysis1924$vac_pattern, pattern_analysis1924$cbirth_g2, prop.r = FALSE, prop.c = TRUE, prop.t = FALSE, 
           prop.chisq =TRUE, missing.include = FALSE, format = "SPSS", digits = 1)


chisq_test <- chisq.test(table(pattern_analysis1924$vac_pattern, pattern_analysis1924$indigenous))

# Print the chi-square test results
print(chisq_test)

rm(chisq_test)



# -------------------------------Visualizations----------------------------------------------

library(ggplot2)
library(dplyr)
library(tidyr)

# Generating vaccination pattern rate grouped by year and vaccination type
df_plot <- pattern_analysis1924 %>%
  mutate(vac_pattern = recode(vac_pattern, "Flu only" = "Influenza only")) %>%
  group_by(child_birth_year, vac_pattern) %>%
  summarise(count = n(), .groups = "drop") %>%
  group_by(child_birth_year) %>%
  mutate(total = sum(count)) %>%
  mutate(proportion = (count / total) * 100) %>%
  ungroup() %>%
  mutate(vac_pattern = factor(vac_pattern, levels = c("Both", "Pertussis only", "Influenza only", "No")))




# Line plot – Trends over time
ggplot(df_plot, aes(x = child_birth_year, y = proportion, color = vac_pattern, group = vac_pattern)) +
  geom_line(size = 1.2) +
  geom_point(size = 1.5) +
  labs(title = "Vaccination Pattern Trends",
       x = "Child Birth Year",
       y = "Proportion (%)",
       color = "Vaccination Patterns") +
  scale_y_continuous(breaks = seq(0, 60, by = 20), limits = c(0, 60)) + # Set y-axis range and breaks
  theme_minimal()


# Save the plot as an SVG file
install.packages("svglite")
library(svglite)

ggsave("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Result/Figures/Line_Rate_vaccination_pattern.svg", 
       plot = last_plot(), device = "svg", width = 10, height = 6, units = "in")

ggsave("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Result/Figures/Line_Rate_vaccination_pattern.TIFF", 
       plot = last_plot(), device = "svg", width = 10, height = 6, units = "in")

# Stacked bar plot – Comparing proportions per year


# Grouped bar plot – Side-by-side comparison

ggplot(df_plot, aes(x = factor(child_birth_year), y = proportion, fill = vac_pattern)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Vaccination Patterns by Year",
       x = "Child Birth Year",
       y = "Proportion (%)",
       fill = "Vaccination Pattern") +
  scale_y_continuous(breaks = seq(0, 60, by = 20), limits = c(0, 60)) + # Set y-axis range and breaks
  theme_minimal()

ggsave("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Result/Figures/Bar_Rate_vaccination_pattern.svg", 
       plot = last_plot(), device = "svg", width = 10, height = 6, units = "in")

ggsave("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Result/Figures/Bar_Rate_vaccination_pattern.TIFF", 
       plot = last_plot(), device = "svg", width = 10, height = 6, units = "in")

rm(df_plot)


# Generating variable to have a 3-way presentation of the data by year and Aboriginal status 

table (pattern_analysis1924$indigenous)

abor_df_plot <- pattern_analysis1924 %>%
  filter(indigenous == "Y" | indigenous == "N") # drop missing values

abor_df_plot <- abor_df_plot %>%
  mutate(indigenous= recode(indigenous, "Y" = "Yes", "N"="No")) %>%
  mutate(vac_pattern = recode(vac_pattern, "Flu only" = "Influenza only")) %>%
  group_by(child_birth_year, indigenous, vac_pattern) %>%
  summarise(count = n(), .groups = "drop") %>%
  ungroup() %>%
  group_by(child_birth_year, indigenous) %>%
  mutate(count_indigenous = sum(count)) %>%
  ungroup() %>%
  group_by(child_birth_year, indigenous) %>%
  mutate(proportion_indigenous = (count / count_indigenous) * 100) %>%
  ungroup() %>%
  group_by(child_birth_year) %>%
  mutate(total = sum(count)) %>%
  mutate(proportion = (count / total) * 100) %>%
  ungroup() %>%
  mutate(vac_pattern = factor(vac_pattern, levels = c("Both", "Pertussis only", "Influenza only", "No")))


# plot by Aboriginal status and year
# Line graph
ggplot(abor_df_plot, aes(x = child_birth_year, y = proportion_indigenous, 
                         color = indigenous, group = indigenous)) +
  geom_line(size = 1) + 
  geom_point(size = 2) +  # Add points for better visibility
  facet_wrap(~ vac_pattern) + 
  labs(title = "Vaccination Pattern Proportions by Year and Aboriginal Status",
       x = "Child Birth Year",
       y = "Proportion (%)",
       color = "Aboriginal Status") +
  scale_y_continuous(breaks = seq(0, 60, by = 20), limits = c(0, 60)) +
  theme_minimal()


ggsave("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Result/Figures/Line_Rate_vaccination_pattern_Aboriginal_Year.svg", 
       plot = last_plot(), device = "svg", width = 10, height = 6, units = "in")

ggsave("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Result/Figures/Line_Rate_vaccination_pattern_Aboriginal_Year.TIFF", 
       plot = last_plot(), device = "svg", width = 10, height = 6, units = "in")

# Bar graph
ggplot(abor_df_plot, aes(x = factor(child_birth_year), y = proportion_indigenous, 
                         fill = indigenous)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.9)) +
  facet_wrap(~ vac_pattern) + 
  labs(title = "Vaccination Pattern Proportions by Year and Aboriginal Status",
       x = "Child Birth Year",
       y = "proportion_Aboriginal",
       fill = "Aboriginal Status") +
  scale_y_continuous(breaks = seq(0, 60, by = 20), limits = c(0, 60)) +
  theme_minimal()


ggsave("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Result/Figures/Bar_Rate_vaccination_pattern_Aboriginal_Year.svg", 
       plot = last_plot(), device = "svg", width = 10, height = 6, units = "in")

ggsave("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Result/Figures/Bar_Rate_vaccination_pattern_Aboriginal_Year.TIFF", 
       plot = last_plot(), device = "svg", width = 10, height = 6, units = "in")


rm(abor_df_plot)

# ---------------------------------------Perth Vaccination Pattern Analysis: Description @ Perth----------------------------------------------------------------------------------------

colnames(pattern_analysis1924)

table (pattern_analysis1924$postcodegrp2)

# Filter areas limited to Perth

perth_analysis1924 <- pattern_analysis1924 %>% 
  filter (postcodegrp2 == "metrophu")



# Tabulate frequency and proportion
library(janitor)

perth_analysis1924 %>%
  tabyl(vac_pattern) %>%
  adorn_totals("row") %>%
  adorn_pct_formatting(digits = 1)

perth_analysis1924 %>%
  tabyl(prov.type) %>%
  adorn_totals("row") %>%
  adorn_pct_formatting(digits = 1)

perth_analysis1924 %>%
  tabyl(provider_type_grouped) %>%
  adorn_totals("row") %>%
  adorn_pct_formatting(digits = 1)


CrossTable(perth_analysis1924$vac_pattern, perth_analysis1924$child_birth_year, prop.r = FALSE, prop.c = TRUE, prop.t = FALSE, 
           prop.chisq = FALSE, missing.include = TRUE, format = "SPSS", digits = 1)

CrossTable(perth_analysis1924$vac_pattern, perth_analysis1924$indigenous, prop.r = FALSE, prop.c = TRUE, prop.t = FALSE, 
           prop.chisq = FALSE, missing.include = TRUE, format = "SPSS", digits = 1)


# Given all unvaccinated are missing for provider, it needs a bit tweak on the code 
temp_perth_pattern <- perth_analysis1924 %>%
  filter(!is.na(provider_type_group))
CrossTable(temp_perth_pattern$vac_pattern, temp_perth_pattern$provider_type_group , prop.r = FALSE, prop.c = TRUE, prop.t = FALSE, 
           prop.chisq = FALSE, missing.include = TRUE, format = "SPSS", digits = 1)
rm (temp_perth_pattern)

# CrossTable(perth_analysis1924$vac_pattern, perth_analysis1924$provider_type_group, prop.r = FALSE, prop.c = TRUE, prop.t = FALSE, prop.chisq = FALSE, missing.include = TRUE, format = "SPSS", digits = 1)


CrossTable(perth_analysis1924$vac_pattern, perth_analysis1924$cbirth_g2, prop.r = FALSE, prop.c = TRUE, prop.t = FALSE, 
           prop.chisq = FALSE, missing.include = TRUE, format = "SPSS", digits = 1)

CrossTable(perth_analysis1924$vac_pattern, perth_analysis1924$cbirth_g2, prop.r = FALSE, prop.c = TRUE, prop.t = FALSE, 
           prop.chisq =TRUE, missing.include = FALSE, format = "SPSS", digits = 1)


chisq_test <- chisq.test(table(perth_analysis1924$vac_pattern, perth_analysis1924$indigenous))

# Print the chi-square test results
print(chisq_test)

rm(chisq_test)



table (perth_analysis1924$time_diff_weeks)

colnames(perth_analysis1924)
table (perth_analysis1924$vac_pattern)

# Assuming perth_analysis1924 is your data frame
# Generate new variables for count and percentage

library(dplyr)
library(ggplot2)

temp_perth_analysis1924 <- perth_analysis1924 %>%
  filter(! (vac_pattern == "No"))%>%  # Exclude the "No" group
  mutate(vac_pattern = recode(vac_pattern, "Flu only" = "Influenza only")) %>%
  mutate(time_diff_weeks = floor(time_diff_weeks)) %>%
  mutate(vac_pattern = factor(vac_pattern, levels = c("Both", "Pertussis only", "Influenza only"))) %>% 
  group_by(time_diff_weeks, vac_pattern) %>%
  summarise(count = n(), .groups = 'drop') %>%
  mutate(percent = count / sum(count) * 100) %>%   # Compute proportion
  ungroup()


# check Flu cases 
flu_temp_perth_analysis1924 <- temp_perth_analysis1924 %>%
  filter(vac_pattern == "Influenza only")

print (sum(flu_temp_perth_analysis1924$count))
table (temp_perth_analysis1924$time_diff_weeks)

rm (flu_temp_perth_analysis1924)


# plot pecent 
ggplot(temp_perth_analysis1924, aes(x = time_diff_weeks, y = percent, color = vac_pattern)) +
  geom_line()+
  geom_smooth(method = "loess", se = FALSE, size = 1) +  # Add smoothed line
  geom_vline(xintercept = c(13, 28), linetype = "dashed", color = "black", size = 1) +  # Vertical lines at weeks 13 and 28
  labs(
    title = "Vaccination Uptake by Gestational Age",
    x = "Gestational Age (Weeks)",
    y = "Percent",
    color = "Vaccination Pattern") +
  theme_minimal()

# Save the plot as an SVG file
library(svglite)

ggsave("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Result/Figures/Gestational_age_vaccination_pattern_percent.svg", 
       plot = last_plot(), device = "svg", width = 10, height = 6, units = "in")

ggsave("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Result/Figures/Gestational_age_vaccination_pattern_percent.TIFF", 
       plot = last_plot(), device = "svg", width = 10, height = 6, units = "in")


# ploting the count
ggplot(temp_perth_analysis1924, aes(x = time_diff_weeks, y = count, color = vac_pattern)) +
  geom_smooth(method = "loess", se = FALSE, size = 1) +  # Add smoothed line
  geom_vline(xintercept = c(13, 28), linetype = "dashed", color = "black", size = 1) +  # Vertical lines at weeks 13 and 28
  labs(
    title = "Vaccination Uptake by Gestational Age",
    x = "Gestational Age (Weeks)",
    y = "Count",
    color = "Vaccination Pattern") +
  theme_minimal()


ggsave("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Result/Figures/Gestational_age_vaccination_pattern_count.svg", 
       plot = last_plot(), device = "svg", width = 10, height = 6, units = "in")

ggsave("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Result/Figures/Gestational_age_vaccination_pattern_count.TIFF", 
       plot = last_plot(), device = "svg", width = 10, height = 6, units = "in")

rm (temp_perth_analysis1924)

table (pattern_analysis1924$prov.type)

# ........................................................................................................................
# ---------------------------------------Spatial Analysis----------------------------------------------------------------------------------------
# ........................................................................................................................


# Website location for the shape file: select the regions and area unit you prefer 

# https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files


# Install and load R packages for spatial mapping and analysis
packages_st <- c("sf", "sp", "raster", "terra", "tmap", "leaflet", "ggplot2", "ggspatial", "spdep", "geosphere", "GISTools", "viridis")

# Install only missing packages
new_packages <- packages_st[!(packages_st %in% installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages)



# Load the libraries
library(sf)        # Simple Features for spatial data
library(sp)        # Spatial data handling
library(raster)    # Raster data manipulation
library(terra)     # Modern raster analysis
library(tmap)      # Thematic mapping
library(leaflet)   # Interactive web maps
library(ggplot2)   # Advanced visualizations
library(ggspatial) # Spatial extensions for ggplot2
library(spdep)     # Spatial dependence and autocorrelation
library(geosphere) # Geographic calculations (distances, areas)
library(RColorBrewer)   # Color palettes
library(GISTools)       # Additional GIS tools
library(viridis)  

# INLA package (Integrated Nested Laplace Approximation) is a powerful tool for spatial modeling, neighborhood analysis, and relative risk (RRR) calculations. 
# particularly useful for Bayesian hierarchical modeling and spatial regression, making it a great choice for advanced spatial analysis tasks.
# The INLA package is not available on CRAN. Instead, it is hosted on a dedicated repository. 

install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
library(INLA)

# Print confirmation message for instalation of spatial files
cat("All spatial mapping and analysis packages have been installed.\n")



# Import the shape file  # set new directory to access unziped file

setwd("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Analysis/SA3_2021_AUST_SHP_GDA2020")

anc_shapefile <- st_read("SA3_2021_AUST_GDA2020.shp")

summary(anc_shapefile) # to understand the structure, content and format; It looks fine (Australian bounderies)

# Plot the data to check the region
tm_shape(anc_shapefile) +
  tm_polygons() +
  tm_layout(main.title = "Australia Administrative Regions")

head(anc_shapefile)
str(anc_shapefile)

colnames(anc_shapefile) <- tolower(colnames(anc_shapefile)) # make variables in lower case


table(anc_shapefile$ste_name21)

# Check the data type 
print(class(anc_shapefile$ste_name21))


# Filter for Western Australia
wa_anc_shapefile <- anc_shapefile %>% 
  filter(ste_name21 == "Western Australia")

# Check the result
print(wa_anc_shapefile)

summary(wa_anc_shapefile) # to understand the structure, content and format; It looks fine (Australian boundaries)

# Plot the data to check the region
tm_shape(wa_anc_shapefile) +
  tm_polygons() +
  tm_layout(main.title = "Western Australia Administrative Regions") # it looks fine

# Check how many geometries are empty
empty_count <- sum(st_is_empty(wa_anc_shapefile$geometry))

cat("Number of empty geometries:", empty_count, "\n") # Number of empty geometries: 2


# Filter out empty geometries
wa_anc_shapefile <- wa_anc_shapefile[!st_is_empty(wa_anc_shapefile$geometry), ]

rm(empty_count)


# --------------------------------Spatial analysis ----------------------------------------------------
# Aggregate data by sa3


colnames(Flu_analysis1924)

sa3_flu_preg_st <- Flu_analysis1924 %>%
  mutate(observed_flu_vac = (flu_vac == "Yes")) %>%
  arrange(child_birth_year, sa3_code16, sa3_name16) %>% 
  group_by(child_birth_year, sa3_code16, sa3_name16) %>%
  summarise(
    observed_flu_vac = sum(observed_flu_vac, na.rm = TRUE), # Count "Yes" for flu_vac
    pregnum_sa3 = n(),  # Sum total pregnancies: counts both "Yes" and "No"
    .groups = "drop"  # Drop the grouping after summarising
  )


# View the output
print(sa3_flu_preg_st)
table(Flu_analysis1924$flu_vac)

sum (sa3_flu_preg_st$pregnum_sa3) #  136059
sum (sa3_flu_preg_st$observed_flu_vac) # 85250: looks fine


# Calculate overall vaccination rate
rate_vac <- sum(sa3_flu_preg_st$observed_flu_vac) / sum(sa3_flu_preg_st$pregnum_sa3) * 100

# Compute expected vaccination count and standardised rate
sa3_flu_preg_st <- sa3_flu_preg_st %>%
  mutate(
    rate_sa3 = observed_flu_vac / pregnum_sa3 * 100,  # SA3-specific rate
    expected_vac = (pregnum_sa3 * rate_vac)/100,  # Expected count based on overall rate; multiplied by 100 due to rate_vac was multiplied by 100 i.e. 
    #rate_vac <- sum(sa3_flu_preg_st$observed_flu_vac) / sum(sa3_flu_preg_st$pregnum_sa3) * 100
    svr_rate_vac = observed_flu_vac / expected_vac * 100  # Standardised vaccination rate (SVR)
  )

# View results
print(sa3_flu_preg_st)
print(rate_vac)  # Overall vaccination rate


# Merge the two df together
# check the names and make sure a similar name for variables used for joining

colnames(wa_anc_shapefile)

colnames(sa3_flu_preg_st)

sa3_flu_preg_st <- sa3_flu_preg_st %>% 
  rename(sa3_name21 = sa3_name16, sa3_code21 = sa3_code16)


# Convert sa3_code21 in wa_anc_shapefile from character to numeric
str(wa_anc_shapefile$sa3_code21)

wa_anc_shapefile <- wa_anc_shapefile %>%
  mutate(sa3_code21 = as.numeric(sa3_code21))

str(sa3_flu_preg_st$sa3_code21)


# Perform the full join with correct column mapping
flu_spatial <- full_join( wa_anc_shapefile, sa3_flu_preg_st, by = c("sa3_name21", "sa3_code21"))

colnames(flu_spatial)

# Check how many geometries are empty
empty_count <- sum(st_is_empty(flu_spatial$geometry))

cat("Number of empty geometries:", empty_count, "\n") # Number of empty geometries: 6. This happens due to some missing values for sa3 for df = sa3_flu_preg_st

# Filter out empty geometries
flu_spatial <- flu_spatial[!st_is_empty(flu_spatial$geometry), ]

rm(empty_count)

flu_spatial <- flu_spatial %>% 
relocate(sa3_code21, sa3_name21, svr_rate_vac, observed_flu_vac, expected_vac,   .after = child_birth_year) 

# ------------------------mapping the rates
# Reproject the Data; set CRS reproject the data to a valid CRS (e.g., WGS84)
st_crs(flu_spatial)  # Check CRS
flu_spatial <- st_transform(flu_spatial, 4326)  # Transform to WGS 84 if CRS is incorect

# If svr_rate_vac has extreme values, it could be affecting the visualization
sum(is.na(flu_spatial$svr_rate_vac))  # Should return 0   == No missing
sum(is.na(flu_spatial$rate_sa3))      # Compare with working variable  == No missing

summary(flu_spatial$svr_rate_vac) # 0.65, 1.35 looks fine
summary(flu_spatial$rate_sa3) # 41.25, 84.62

colnames(flu_spatial)

# Vaccination Rate (rate_sa3) Map

ggplot(flu_spatial) +
  geom_sf(aes(fill = rate_sa3), color = "white", size = 0.2) +
  scale_fill_viridis_c(option = "magma", name = "Vaccination Rate") +
  theme_minimal() +
  annotation_north_arrow(location = "tl", which_north = "true", 
                         style = north_arrow_fancy_orienteering()) +  # Adds North arrow on top right
  theme(
    axis.text.x = element_blank(),  # Remove x-axis labels
    axis.ticks.x = element_blank(),    # Remove axis ticks
    axis.text.y = element_blank(),  # Removes degrees on the y-axis
    axis.ticks.y = element_blank()
  ) +
  labs(title = "Pregnancy Vaccination Rate")

ggsave("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Result/Figures/WA_vaccination Rate.svg", 
       plot = last_plot(), device = "svg", width = 10, height = 6, units = "in")

ggsave("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Result/Figures/WA_vaccination Rate.TIFF", 
       plot = last_plot(), device = "svg", width = 10, height = 6, units = "in")


# Standardised Vaccination Rate (svr_rate_vac) Map 

ggplot(flu_spatial) +
  geom_sf(aes(fill = svr_rate_vac), color = "white", size = 0.2) +
  coord_sf(expand = FALSE) + # Prevents cropping
  scale_fill_viridis_c(option = "magma", name = "SVR Rate", na.value = "grey") + # Show missing areas in grey
  ggtitle("Pregnancy Standardised Vaccination Rate") +
  theme_bw() +
  annotation_north_arrow(location = "tl", which_north = "true", 
                         style = north_arrow_fancy_orienteering()) +
  theme(
    axis.text.x = element_blank(),  # Remove x-axis labels
    axis.text.y = element_blank(),  # Remove y-axis labels
    axis.ticks = element_blank()    # Remove axis ticks
  )


ggsave("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Result/Figures/WA_Standardised Vaccination Rate.svg", 
       plot = last_plot(), device = "svg", width = 10, height = 6, units = "in")

ggsave("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Result/Figures/WA_Standardised Vaccination Rate.TIFF", 
       plot = last_plot(), device = "tiff", width = 10, height = 6, units = "in")


table(flu_spatial$gcc_name21)

colnames(flu_spatial)


# -------------------------------mapping for Perth only-----------------------------------------------

# Filter for Greater Perth region
flu_spatial_perth <- flu_spatial %>%
  filter(gcc_name21 == "Greater Perth")


summary(flu_spatial_perth$svr_rate_vac) #  0.7472  0.9351  1.0296  1.0158  1.0938  1.2600 
summary(flu_spatial_perth$rate_sa3)    #   46.82   58.59   64.51   63.64   68.54   78.95 

# Vaccination Rate (rate_sa3) Map

ggplot(flu_spatial_perth) +
  geom_sf(aes(fill = rate_sa3), color = "white", size = 0.2) +
  scale_fill_viridis_c(option = "magma", name = "Vaccination Rate") +
  theme_minimal() +
  annotation_north_arrow(location = "tl", which_north = "true", 
                         style = north_arrow_fancy_orienteering()) +  # Adds North arrow on top right
  theme(
    axis.text.x = element_blank(),  # Remove x-axis labels
    axis.ticks.x = element_blank(),    # Remove axis ticks
    axis.text.y = element_blank(),  # Removes degrees on the y-axis
    axis.ticks.y = element_blank()
  ) +
  labs(title = "Pregnancy Vaccination Rate")

ggsave("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Result/Figures/Perth_Map_Spatial_vaccination Rate.svg", 
       plot = last_plot(), device = "svg", width = 10, height = 6, units = "in")

ggsave("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Result/Figures/Perth_Map_Spatial_vaccination Rate.TIFF", 
       plot = last_plot(), device = "svg", width = 10, height = 6, units = "in")


# Standardised Vaccination Rate (svr_rate_vac) Map 

ggplot(flu_spatial_perth) +
  geom_sf(aes(fill = svr_rate_vac), color = "white", size = 0.2) +
  coord_sf(expand = FALSE) + # Prevents cropping
  scale_fill_viridis_c(option = "magma", name = "SVR Rate", na.value = "grey") + # Show missing areas in grey
  ggtitle("Pregnancy Standardised Vaccination Rate") +
  theme_bw() +
  annotation_north_arrow(location = "tl", which_north = "true", 
                         style = north_arrow_fancy_orienteering()) +
  theme(
    axis.text.x = element_blank(),  # Remove x-axis labels
    axis.text.y = element_blank(),  # Remove y-axis labels
    axis.ticks = element_blank()    # Remove axis ticks
  )


ggsave("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Result/Figures/Perth_Standardised Vaccination Rate.svg", 
       plot = last_plot(), device = "svg", width = 10, height = 6, units = "in")

ggsave("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Result/Figures/Perth_Standardised Vaccination Rate.TIFF", 
       plot = last_plot(), device = "svg", width = 10, height = 6, units = "in")



# Create interactive map

leaflet(flu_spatial_perth) %>%
  addTiles() %>%  # Base map
  addPolygons(
    fillColor = ~colorNumeric(palette = "RdBu", domain = svr_rate_vac)(svr_rate_vac),
    weight = 1,  # Border width
    color = "white",  # Border color
    fillOpacity = 0.7,  # Transparency
    highlight = highlightOptions(weight = 3, color = "black", bringToFront = TRUE),  # Highlight on hover
    label = ~paste0(sa3_name21, "<br>SVR: ", round(svr_rate_vac, 2)),  # Tooltip on hover
    labelOptions = labelOptions(direction = "auto")
  ) %>%
  addLegend(
    pal = colorNumeric(palette = "RdBu", domain = flu_spatial_perth$svr_rate_vac),
    values = flu_spatial_perth$svr_rate_vac,
    title = "Influenza SVR Rate",
    position = "bottomleft"
  )

# Save the map as an HTML file
saveWidget(map, "C:/Users/he227319/OneDrive - WA Health/2_WA_related/Antenatal_Vaccination/Result/Figures/Perth_Standardised_Vaccination_Rate 2.html")

# Create an interactive map

leaflet(flu_spatial_perth) %>%
  addTiles() %>%
  addPolygons(
    fillColor = ~colorNumeric("viridis", svr_rate_vac)(svr_rate_vac),
    weight = 1,
    opacity = 1,
    color = "white",
    dashArray = "3",
    fillOpacity = 0.7,
    highlight = highlightOptions(
      weight = 2,
      color = "#666",
      dashArray = "",
      fillOpacity = 0.7,
      bringToFront = TRUE
    ),
    label = ~paste(sa3_name21, "<br>", "SVR Rate:", round(svr_rate_vac, 2)),
    labelOptions = labelOptions(
      style = list("font-weight" = "normal", padding = "3px 8px"),
      textsize = "15px",
      direction = "auto"
    )
  ) %>%
  addLegend(
    pal = colorNumeric("viridis", flu_spatial_perth$svr_rate_vac),
    values = flu_spatial_perth$svr_rate_vac,
    title = "Influenza SVR Rate",
    position = "bottomleft"
  )







ggplot(flu_spatial) +
  geom_sf(aes(fill = svr_rate_vac), color = "white", size = 0.2) +
  scale_fill_gradient2(
    midpoint = 1, low = "blue", mid = "white", high = "red",
    name = "SVR Rate"  # Legend title
  ) +
  ggtitle("Pregnancy Standardised Vaccination Rate") +
  theme_bw() +
  annotation_north_arrow(location = "tl", which_north = "true", 
                         style = north_arrow_fancy_orienteering()) +  # North arrow on top right
  theme(
    axis.text.x = element_blank(),  # Remove x-axis labels
    axis.text.y = element_blank(),  # Remove y-axis labels
    axis.ticks = element_blank()    # Remove axis ticks
  ) 








# All year combined sa3 level vaccination estimates 

colnames(Flu_analysis1924)

allyr_sa3_flu_preg_st <- Flu_analysis1924 %>%
  mutate(allyr_observed_flu_vac = (flu_vac == "Yes")) %>%
  arrange(child_birth_year, sa3_code16, sa3_name16) %>% 
  group_by(sa3_code16, sa3_name16) %>%
  summarise(
    allyr_observed_flu_vac = sum(allyr_observed_flu_vac, na.rm = TRUE), # Count "Yes" for flu_vac
    allyr_pregnum_sa3 = n(),  # Sum total pregnancies: counts both "Yes" and "No"
    .groups = "drop"  # Drop the grouping after summarising
  )

# View the output
print(allyr_sa3_flu_preg_st)
table(Flu_analysis1924$flu_vac)

sum (allyr_sa3_flu_preg_st$allyr_pregnum_sa3) #  136059
sum (allyr_sa3_flu_preg_st$allyr_observed_flu_vac) # 85250: looks fine

# Calculate overall vaccination rate
allyr_rate_vac <- sum(allyr_sa3_flu_preg_st$allyr_observed_flu_vac) / sum(allyr_sa3_flu_preg_st$allyr_pregnum_sa3) * 100

# Compute expected vaccination count and standardised rate
allyr_sa3_flu_preg_st <- allyr_sa3_flu_preg_st %>%
  mutate(
    allyr_rate_sa3 = allyr_observed_flu_vac / allyr_pregnum_sa3 * 100,  # SA3-specific rate
    allyr_expected_vac = (allyr_pregnum_sa3 * allyr_rate_vac)/100,  # Expected count based on overall rate; multiplied by 100 due to rate_vac was multiplied by 100 i.e. 
    #rate_vac <- sum(sa3_flu_preg_st$observed_flu_vac) / sum(sa3_flu_preg_st$pregnum_sa3) * 100
    allyr_svr_rate_vac = allyr_observed_flu_vac / allyr_expected_vac * 100  # Standardised vaccination rate (SVR)
  )

# View results
print(allyr_rate_vac)  # Overall vaccination rate



# Aggregate the data by sa3 and year
colnames(Flu_analysis1924)

sa3_flu_preg_st <- Flu_analysis1924 %>%
  mutate(observed_flu_vac = (flu_vac == "Yes")) %>%
  arrange(child_birth_year, sa3_code16, sa3_name16) %>% 
  group_by(child_birth_year, sa3_code16, sa3_name16) %>%
  summarise(
    observed_flu_vac = sum(observed_flu_vac, na.rm = TRUE), # Count "Yes" for flu_vac
    pregnum_sa3 = n(),  # Sum total pregnancies: counts both "Yes" and "No"
    .groups = "drop"  # Drop the grouping after summarising
  )

# View the output
print(sa3_flu_preg_st)
table(Flu_analysis1924$flu_vac)

sum (sa3_flu_preg_st$pregnum_sa3) #  136059
sum (sa3_flu_preg_st$observed_flu_vac) # 85250: looks fine


# Calculate overall vaccination rate by each year

# Initialize a vector to store the vaccination rates
rate_vac <- numeric(6)  # 6 years from 2019 to 2024

# Loop through each year from 2019 to 2024
for (i in 1:6) {
  year <- 2018 + i  # Calculate the year (2019, 2020, ..., 2024)
  
  # Calculate the vaccination rate for the current year
  rate_vac[i] <- sum(sa3_flu_preg_st$observed_flu_vac[sa3_flu_preg_st$child_birth_year == year]) / 
    sum(sa3_flu_preg_st$pregnum_sa3[sa3_flu_preg_st$child_birth_year == year]) * 100
}

# Assign the results to named variables (optional)
rate_vac_2019 <- rate_vac[1]
rate_vac_2020 <- rate_vac[2]
rate_vac_2021 <- rate_vac[3]
rate_vac_2022 <- rate_vac[4]
rate_vac_2023 <- rate_vac[5]
rate_vac_2024 <- rate_vac[6]

# Print the results (optional)
print(rate_vac)

# Initialize a list to store the results for each year
results_list <- list()

# Loop through each year from 2019 to 2024 to compute expected vaccination count and SVR
for (i in 1:6) {
  year <- 2018 + i  # Calculate the year (2019, 2020, ..., 2024)
  
  # Filter data for the current year
  sa3_flu_preg_st_year <- sa3_flu_preg_st %>% filter(child_birth_year == year)
  
  # Compute expected vaccination count and SVR for the current year
  sa3_flu_preg_st_year <- sa3_flu_preg_st_year %>%
    mutate(
      rate_sa3 = observed_flu_vac / pregnum_sa3 * 100,  # SA3-specific rate
      expected_vac = (pregnum_sa3 * rate_vac[i]) / 100,  # Expected count based on the current year's rate
      svr_rate_vac = observed_flu_vac / expected_vac * 100  # Standardised vaccination rate (SVR)
    )
  
  # Store the results in the list
  results_list[[i]] <- sa3_flu_preg_st_year
}

# Combine the results for all years into a single data frame
sa3_flu_preg_st_final <- bind_rows(results_list)

# View the final data frame
head(sa3_flu_preg_st_final)
tail(sa3_flu_preg_st_final)

# clean the workspace
rm (rate_vac_2019, rate_vac_2020, rate_vac_2021, rate_vac_2022, rate_vac_2023, rate_vac_2024, year, results_list, sa3_flu_preg_st_year, sa3_flu_preg_st, i)


# Merge the two df together
# check the names and make sure a similar name for variables used for joining

# Merging the dataframe ------------------------------------
# Check column names in each data frame and rename them accordingly 

names(wa_anc_shapefile)
names(sa3_flu_preg_st_final)
names(allyr_sa3_flu_preg_st)

sa3_flu_preg_st_final <- sa3_flu_preg_st_final %>% 
  rename(sa3_name21 = sa3_name16, sa3_code21 = sa3_code16)

allyr_sa3_flu_preg_st <- allyr_sa3_flu_preg_st %>% 
  rename(sa3_name21 = sa3_name16, sa3_code21 = sa3_code16)


# Convert sa3_code21 in wa_anc_shapefile from character to numeric
str(wa_anc_shapefile$sa3_code21)

wa_anc_shapefile <- wa_anc_shapefile %>%
  mutate(sa3_code21 = as.numeric(sa3_code21))

str(sa3_flu_preg_st_final$sa3_code21)

# Perform the full join with correct column mapping

#Join wa_anc_shapefile and sa3_flu_preg_st_final
merged_temp <- full_join(wa_anc_shapefile, sa3_flu_preg_st_final, by = c("sa3_name21", "sa3_code21"))
# Join the result with allyr_sa3_flu_preg_st
sa3_spatial_merge <- full_join(merged_temp, allyr_sa3_flu_preg_st, by = c("sa3_name21", "sa3_code21"))

names(sa3_spatial_merge) 
rm (merged_temp, allyr_sa3_flu_preg_st, sa3_flu_preg_st_final)

# Merging with the final dataset
names(Flu_analysis1924)

Flu_analysis1924 <- Flu_analysis1924 %>% 
  rename(sa3_name21 = sa3_name16, sa3_code21 = sa3_code16)



#merge the data with Flu_analysis1924 to get individuals linked 
flu_ind_spatial <- left_join(Flu_analysis1924, sa3_spatial_merge, 
                             by = c("sa3_name21", "sa3_code21"), 
                             relationship = "many-to-many")


## drop some observations that have >=2 flu on same preganancy

flu_ind_spatial <- flu_ind_spatial %>%
  arrange(id, child_dob) %>%
  group_by(id, child_dob) %>%
  mutate(dup_dup = row_number()) %>%
  ungroup()

table (flu_ind_spatial$dup_dup)

flu_ind_spatial <- flu_ind_spatial %>%
  filter(dup_dup ==1)

# Check how many geometries are empty
empty_count <- sum(st_is_empty(flu_ind_spatial$geometry))

cat("Number of empty geometries:", empty_count, "\n") # Number of empty geometries: 6. This happens due to some missing values for sa3 for df = sa3_flu_preg_st

# Filter out empty geometries
flu_ind_spatial <- flu_ind_spatial[!st_is_empty(flu_ind_spatial$geometry), ]

rm(empty_count)




# -------------------------------------------------------------------------------------------------
# ........................................................................................................................

colnames(flu_ind_spatial)
flu_ind_spatial$child_birth_year.y <- NULL

flu_ind_spatial <- flu_ind_spatial %>%
  rename(child_birth_year = child_birth_year.x)


flu_provider_spatial <- flu_ind_spatial %>%
  group_by(prov.postcode) %>%
  mutate(dup = n()) %>%
  ungroup()

table (flu_provider_spatial$dup)

flu_provider_spatial <- flu_provider_spatial %>% 
  filter(dup==1)

# Ensure provider group categorization
flu_provider_spatial <- flu_provider_spatial %>% 
  mutate(provider_group3 = case_when(
    prov.type %in% c("MEDICARE GP", "GENERAL PRACTICE") ~ "GP",
    prov.type == "PHARMACY" ~ "Pharmacy",
    is.na(prov.type) ~ NA_character_,
    TRUE ~ "Other"
  ))

# Filter and process spatial data
flu_provider_filtered <- flu_provider_spatial %>%
  filter(provider_group3 %in% c("GP", "Pharmacy", "Other")) %>%
  group_by(prov.postcode, provider_group3) %>%
  summarise(geometry = st_union(geometry), .groups = "drop") %>%
  st_as_sf() %>%
  mutate(geometry = st_centroid(geometry))  # Ensure it's an `sf` object

# Ensure flu_spatial is an sf object
flu_spatial <- st_as_sf(flu_spatial)
flu_provider_filtered <- st_as_sf(flu_provider_filtered)


# mapping the rate with location of health facility as an overlay 

ggplot(flu_spatial) + # Base map with vaccination rates
  geom_sf(aes(fill = rate_sa3), color = "white", size = 0.2) +
  scale_fill_viridis_c(option = "magma", name = "Vaccination Rate") +
  
  # Providers with different symbols and colors
  geom_sf(data = flu_provider_filtered, 
          aes(geometry = geometry, shape = provider_group3, color = provider_group3), 
          size = 3) +
  scale_shape_manual(name = "Provider Type", 
                     values = c("GP" = 3, "Pharmacy" = 4, "Other" = 17)) +  # Custom symbols and colors
  scale_color_manual(name = "Provider Type",
                     values = c("GP" = "blue", "Pharmacy" = "red", "Other" = "green")) +  # Colors
  theme_minimal() +
  
  annotation_north_arrow(location = "tl", which_north = "true", 
                         style = north_arrow_fancy_orienteering()) +   # North arrow
  # Theme adjustments
  theme(
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    legend.box = "vertical",  # Keeps legends well-organized
    legend.position = "right"  # Places legends on the right
  ) +
  
  labs(title = "Pregnancy Vaccination Rate")


# Save the map 

setwd ("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Result/Figures/")

ggsave("WA_Layer_vaccination Rate.svg", 
       plot = last_plot(), device = "svg", width = 10, height = 6, units = "in")
ggsave("WA_Layer_vaccination Rate.JPEG", 
       plot = last_plot(), device = "jpeg", width = 10, height = 6, units = "in")


# Crearting interactive map with provider overlay 

library(leaflet)
library(sf)
library(dplyr)
library(htmlwidgets)

# Ensure flu_spatial is in WGS 84 (EPSG:4326) for Leaflet
flu_spatial <- st_transform(flu_spatial, crs = 4326)

# Define color palette for SVR rate
svr_palette <- colorNumeric("viridis", domain = flu_spatial$svr_rate_vac, na.color = "transparent")

# Define provider colors as a named list instead of a named vector
provider_types <- unique(flu_provider_filtered$provider_group3)
provider_colors <- setNames(rainbow(length(provider_types)), provider_types)
provider_colors_list <- as.list(provider_colors)  # Convert to list to avoid jsonlite warning

# Assign colors to each provider based on their group
flu_provider_filtered <- flu_provider_filtered %>%
  mutate(
    lon = st_coordinates(geometry)[, 1],
    lat = st_coordinates(geometry)[, 2],
    provider_color = unname(provider_colors[provider_group3])  # Ensure it extracts values correctly
  )

# Create interactive leaflet map

map <- leaflet(flu_spatial) %>%
  addTiles() %>%
  addPolygons(
    fillColor = ~svr_palette(svr_rate_vac),
    weight = 1,
    opacity = 1,
    color = "white",
    dashArray = "3",
    fillOpacity = 0.7,
    highlight = highlightOptions(
      weight = 2,
      color = "#666",
      dashArray = "",
      fillOpacity = 0.7,
      bringToFront = TRUE
    ),
    label = ~paste(sa3_name21, "<br>", "SVR Rate:", round(svr_rate_vac, 2)),
    labelOptions = labelOptions(
      style = list("font-weight" = "normal", padding = "3px 8px"),
      textsize = "15px",
      direction = "auto"
    )
  ) %>%
  addCircleMarkers(
    data = flu_provider_filtered,
    lng = ~lon,
    lat = ~lat,
    color = ~provider_color,
    fillColor = ~provider_color,
    fillOpacity = 0.7,
    radius = 4,
    label = ~paste("Provider Type:", provider_group3, "<br>Postcode:", prov.postcode),
    labelOptions = labelOptions(
      style = list("font-weight" = "bold", padding = "3px 8px"),
      textsize = "13px",
      direction = "auto"
    )
  ) %>%
  addLegend(
    pal = svr_palette,
    values = flu_spatial$svr_rate_vac,
    title = "Influenza SVR Rate",
    position = "bottomleft"
  ) %>%
  addLegend(
    colors = unname(unlist(provider_colors_list)),
    labels = names(provider_colors_list),
    title = "Health Providers",
    position = "bottomright"
  )

# Save without self-contained option i.e. # Save the leaflet map as an HTML file without relying on pandoc
saveWidget(map, file = "Interactive_Overlay_Flu_SVR_WA.html", selfcontained = FALSE)







# -------Shiny app for vaccination---------------------




# ...............................Use antenatal vaccination data for practice ...............
load("C:/Users/he227319/OneDrive - WA Health/1 _HMB/Data and Analysis/Data Camp/Shiny_vaccination_data.RData")

# Get a Named List of Data Frames, data.table, and Functions in the workspace

shiny_app <- pattern_analysis1924 

colnames(shiny_app)

str(shiny_app$service.date)
str(shiny_app$dob)


shiny_app <- shiny_app %>%
  mutate(gestational_age = floor(time_diff_weeks),
         age = floor(as.numeric(difftime(service.date, dob, units = "days")) / 365.25)) %>% 
  filter(child_indigenous == "Y" | child_indigenous =="N") # remove missing 

table(shiny_app$gestational_age)
table(shiny_app$age)

# it nneds some work to fix 
# - Ideas  == Present the count only
# - see options to do rates
# work on the following variables 

age, gestational_age, child_indigenous, child_birth_year, vac_pattern


# Generating vaccination pattern rate grouped by year and vaccination type
shiny_app <- pattern_analysis1924 %>%
  mutate(vac_pattern = recode(vac_pattern, "Flu only" = "Influenza only")) %>%
  group_by(child_birth_year, vac_pattern) %>%
  summarise(count = n(), .groups = "drop") %>%
  group_by(child_birth_year) %>%
  mutate(total = sum(count)) %>%
  mutate(proportion = (count / total) * 100) %>%
  ungroup() %>%
  mutate(vac_pattern = factor(vac_pattern, levels = c("Both", "Pertussis only", "Influenza only", "No")))




# Line plot – Trends over time
ggplot(shiny_app, aes(x = child_birth_year, y = proportion, color = vac_pattern, group = vac_pattern)) +
  geom_line(size = 1.2) +
  geom_point(size = 1.5) +
  labs(title = "Vaccination Pattern Trends",
       x = "Child Birth Year",
       y = "Proportion (%)",
       color = "Vaccination Patterns") +
  scale_y_continuous(breaks = seq(0, 60, by = 20), limits = c(0, 60)) + # Set y-axis range and breaks
  theme_minimal()



# --------------------working apps but needs some fixing on the message-----------------

flu_nogeometry <- flu_ind_spatial %>% 
  select(-geometry)

colnames(flu_nogeometry)

str(flu_nogeometry$service.date)
str(flu_nogeometry$dob)


flu_nogeometry <- flu_nogeometry %>%
  mutate(gestational_age = floor(time_diff_weeks),
         age = floor(as.numeric(difftime(service.date, dob, units = "days")) / 365.25)) %>% 
  filter(child_indigenous == "Y" | child_indigenous =="N") # remove missing 

table(flu_nogeometry$gestational_age)
table(flu_nogeometry$age)


# ------------------------------------------------

library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
library(DT)

my_css <- HTML("
  #download_data {
    background: orange;
    font-size: 20px;
  }
  
  #table {
    color: red;
  }
")

ui <- fluidPage(
  h1("Pertussis Vaccination Coverage"),
  tags$style(my_css),  # Apply CSS
  
  sidebarLayout(
    sidebarPanel(
      sliderInput("age", "Age of mother", min = 0, max = 50, value = c(20, 24)),
      sliderInput("gestational_age", "Gestational Age", min = 0, max = 42, value = 10),
      
      # Keep "Y" and "N" as actual values but display labels
      radioButtons("indigenous", "Aboriginal status", 
                   choices = c("Aboriginal" = "Y", "Non-Aboriginal" = "N")),
      
      # Ensure "North Metro" is set as default correctly
      selectInput("health_region", "Health Region (Operation)", 
                  choices = unique(flu_nogeometry$`health region (operation)`), 
                  multiple = TRUE,
                  selected = ifelse("North Metro" %in% flu_nogeometry$`health region (operation)`, 
                                    "North Metro", 
                                    unique(flu_nogeometry$`health region (operation)`)[1])),
      
      actionButton("show_result", "Show Result"),
      actionButton("show_help", "Help"),
      downloadButton("download_data")
    ),
    
    mainPanel(
      plotlyOutput("plot"),
      DTOutput("table")
    )
  )
)

server <- function(input, output) {
  
  observeEvent(input$show_help, {
    showModal(modalDialog(
      title = "Help",
      "This data was compiled from Australian Immunization Register data by Public Health Intelligence team."
    ))
  })
  
  filtered_data <- reactive({
    flu_nogeometry %>%
      filter(child_indigenous %in% input$indigenous) %>%  # Now input$indigenous contains "Y" or "N"
      group_by(child_birth_year) %>%
      summarise(rate_sa3 = mean(rate_sa3, na.rm = TRUE)) %>%
      ungroup()
  })
  
  output$table <- renderDT({
    filtered_data()
  })
  
  output$download_data <- downloadHandler(
    filename = "Flu_data.csv",
    content = function(file) {
      write.csv(filtered_data(), file, row.names = FALSE)
    }
  )
  
  output$plot <- renderPlotly({
    p <- ggplot(filtered_data(), aes(x = child_birth_year, y = rate_sa3, group = 1)) +  # Ensure group is defined
      geom_line(color = "blue") +
      geom_point(color = "red") +  # Add points for clarity
      labs(title = "Vaccination Coverage Trends", 
           x = "Year", y = "Coverage Rate") +
      theme_minimal()
    
    ggplotly(p)
  })
}

shinyApp(ui, server)



# -----------------------------------------------------------------------------

library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
library(DT)

my_css <- HTML("
  #download_data {
    background: orange;
    font-size: 20px;
  }
  
  #table {
    color: red;
  }
")

ui <- fluidPage(
  h1("Pertussis Vaccination Coverage"),
  tags$style(my_css),  # Apply CSS
  
  tabsetPanel(
    tabPanel(
      title = "Inputs",
      sliderInput("age", "Age of mother", min = 0, max = 50, value = c(20, 24)),
      sliderInput("gestational_age", "Gestational Age", min = 0, max = 42, value = 10),
      
      # Keep "Y" and "N" as actual values but display labels
      radioButtons("indigenous", "Aboriginal status", 
                   choices = c("Aboriginal" = "Y", "Non-Aboriginal" = "N")),
      
      # Ensure "North Metro" is set as default correctly
      selectInput("health_region", "Health Region (Operation)", 
                  choices = unique(flu_nogeometry$`health region (operation)`), 
                  multiple = TRUE,
                  selected = ifelse("North Metro" %in% flu_nogeometry$`health region (operation)`, 
                                    "North Metro", 
                                    unique(flu_nogeometry$`health region (operation)`)[1])),
      
      actionButton("show_result", "Show Result"),
      actionButton("show_help", "Help"),
      downloadButton("download_data")
    ),
    
    tabPanel(title = "Plot", plotlyOutput("plot")),
    tabPanel(title = "Table", DT::dataTableOutput("table"))
  )
)

server <- function(input, output) {
  
  observeEvent(input$show_help, {
    showModal(modalDialog(
      title = "Help",
      "This data was compiled from Australian Immunization Register data by Public Health Intelligence team."
    ))
  })
  
  filtered_data <- reactive({
    flu_nogeometry %>%
      filter(child_indigenous %in% input$indigenous) %>%  # Now input$indigenous contains "Y" or "N"
      select(age, rate_sa3, observed_flu_vac, svr_rate_vac, 
             child_birth_year, gestational_age, child_indigenous, 
             postcodegrp2, `health region (operation)`)
  })
  
  output$table <- DT::renderDataTable({
    filtered_data()
  })
  
  output$download_data <- downloadHandler(
    filename = "Flu_data.csv",
    content = function(file) {
      write.csv(filtered_data(), file, row.names = FALSE)
    }
  )
  
  output$plot <- renderPlotly({
    p <- ggplot(filtered_data(), aes(x = child_birth_year, y = rate_sa3, group = 1)) +  # Ensure group is defined
      geom_line(color = "blue") +
      geom_point(color = "red") +  # Add points for clarity
      labs(title = "Vaccination Coverage Trends", 
           x = "Year", y = "Coverage Rate") +
      theme_minimal()
    
    ggplotly(p)
  })
}

shinyApp(ui, server)


# -------------------------------------------
my_css <- HTML("
  #download_data {
    background: orange;
    font-size: 20px;
  }
  
  #table {
    color: red;
  }
")

ui <- fluidPage(
  h1("Pertussis Vaccination Coverage"),
  tags$style(my_css),  # Apply CSS
  
  tabsetPanel(
    tabPanel(
      title = "Inputs",
      sliderInput("age", "Age of mother", min = 0, max = 50, value = c(20, 24)),
      sliderInput("gestational_age", "Gestational Age", min = 0, max = 42, value = 10),
      
      # Keep "Y" and "N" as actual values but display labels
      radioButtons("indigenous", "Aboriginal status", 
                   choices = c("Aboriginal" = "Y", "Non-Aboriginal" = "N")),
      
      # Ensure "North Metro" is set as default correctly
      selectInput("health_region", "Health Region (Operation)", 
                  choices = unique(flu_nogeometry$`health region (operation)`), 
                  multiple = TRUE,
                  selected = ifelse("North Metro" %in% flu_nogeometry$`health region (operation)`, 
                                    "North Metro", 
                                    unique(flu_nogeometry$`health region (operation)`)[1])),
      
      actionButton("show_result", "Show Result"),
      actionButton("show_help", "Help"),
      downloadButton("download_data")
    ),
    
    tabPanel(title = "Plot", plotOutput("plot")),
    tabPanel(title = "Table", DT::dataTableOutput("table"))
  )
)

server <- function(input, output) {
  
  observeEvent(input$show_help, {
    showModal(modalDialog(
      title = "Help",
      "This data was compiled from Australian Immunization Register data by Public Health Intelligence team."
    ))
  })
  
  filtered_data <- reactive({
    flu_nogeometry %>%
      filter(child_indigenous %in% input$indigenous) %>%  # Now input$indigenous contains "Y" or "N"
      select(age, rate_sa3, observed_flu_vac, svr_rate_vac, 
             child_birth_year, gestational_age, child_indigenous, 
             postcodegrp2, `health region (operation)`)
  })
  
  output$table <- DT::renderDataTable({
    filtered_data()
  })
  
  output$download_data <- downloadHandler(
    filename = "Flu_data.csv",
    content = function(file) {
      write.csv(filtered_data(), file, row.names = FALSE)
    }
  )
  
  output$plot <- renderPlotly({
    ggplot(filtered_data(), aes(x = child_birth_year, y = rate_sa3, group = 1)) +  # Ensure group is defined
      geom_line(color = "blue") +
      geom_point(color = "red") +  # Add points for clarity
      labs(title = "Vaccination Coverage Trends", 
           x = "Year", y = "Coverage Rate") +
      theme_minimal()
  })
}

shinyApp(ui, server)






#_______________________________________________________________________#_______________________________________________________________________
#_______________________________________________________________________#_______________________________________________________________________

save.image("C:/Users/he227319/OneDrive - WA Health/2 _WA related/Antenatal Vaccination/Analysis/Pregnant Cohort_AntVac.RData")











#_______________________________________________________________________#_______________________________________________________________________
#_______________________________________________________________________#_______________________________________________________________________


















